<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avil Page (Posts about command-line)</title><link>http://avilpage.com/</link><description></description><atom:link href="http://avilpage.com/tags/command-line.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 03 Nov 2018 15:54:00 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Comparision Of Alexa, Majestic &amp; Domcop Top Million Sites</title><link>http://avilpage.com/2018/11/comparision-alexa-majestic-domcorp-top-million-sites.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://s3.amazonaws.com/alexa-static/top-1m.csv.zip"&gt;Alexa&lt;/a&gt;, &lt;a href="https://blog.majestic.com/development/majestic-million-csv-daily/"&gt;Majestic&lt;/a&gt; &amp;amp; &lt;a href="https://www.domcop.com/top-10-million-domains"&gt;Domcop&lt;/a&gt;(based on &lt;a href="https://commoncrawl.org/"&gt;CommonCrawl&lt;/a&gt; data) provide top 1 million popular websites based on their analytics. In this article we will download this data and compare them using Linux command line tools.&lt;/p&gt;
&lt;h4&gt;Collecting data&lt;/h4&gt;
&lt;p&gt;Lets download data from above sources and extract domain names. The data format is different for each source. We can use &lt;code&gt;awk&lt;/code&gt; tool to extract domains column from the source. After extracting data, sort it and save it to a file.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# alexa&lt;/span&gt;

$ wget http://s3.amazonaws.com/alexa-static/top-1m.csv.zip

$ unzip top-1m.csv.zip

&lt;span class="c1"&gt;# data sorted by ranking&lt;/span&gt;
$ head -n &lt;span class="m"&gt;5&lt;/span&gt; top-1m.csv
&lt;span class="m"&gt;1&lt;/span&gt;,google.com
&lt;span class="m"&gt;2&lt;/span&gt;,youtube.com
&lt;span class="m"&gt;3&lt;/span&gt;,facebook.com
&lt;span class="m"&gt;4&lt;/span&gt;,baidu.com
&lt;span class="m"&gt;5&lt;/span&gt;,wikipedia.org

$ awk -F &lt;span class="s2"&gt;","&lt;/span&gt; &lt;span class="s1"&gt;'{print $2}'&lt;/span&gt; top-1m.csv &lt;span class="p"&gt;|&lt;/span&gt; sort &amp;gt; alexa

&lt;span class="c1"&gt;# domains after sorting alphabetically&lt;/span&gt;
$ head -n &lt;span class="m"&gt;5&lt;/span&gt; alexa
&lt;span class="m"&gt;00000&lt;/span&gt;.life
&lt;span class="m"&gt;00&lt;/span&gt;-000.pl
&lt;span class="m"&gt;00004&lt;/span&gt;.tel
&lt;span class="m"&gt;00008888&lt;/span&gt;.tumblr.com
0002rick.tumblr.com
&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Domcop&lt;/span&gt;

$ wget https://www.domcop.com/files/top/top10milliondomains.csv.zip

$ unzip top10milliondomains.csv.zip

&lt;span class="c1"&gt;# data sorted by ranking&lt;/span&gt;
$ head -n &lt;span class="m"&gt;5&lt;/span&gt; top10milliondomains.csv
&lt;span class="s2"&gt;"Rank"&lt;/span&gt;,&lt;span class="s2"&gt;"Domain"&lt;/span&gt;,&lt;span class="s2"&gt;"Open Page Rank"&lt;/span&gt;
&lt;span class="s2"&gt;"1"&lt;/span&gt;,&lt;span class="s2"&gt;"fonts.googleapis.com"&lt;/span&gt;,&lt;span class="s2"&gt;"10.00"&lt;/span&gt;
&lt;span class="s2"&gt;"2"&lt;/span&gt;,&lt;span class="s2"&gt;"facebook.com"&lt;/span&gt;,&lt;span class="s2"&gt;"10.00"&lt;/span&gt;
&lt;span class="s2"&gt;"3"&lt;/span&gt;,&lt;span class="s2"&gt;"youtube.com"&lt;/span&gt;,&lt;span class="s2"&gt;"10.00"&lt;/span&gt;
&lt;span class="s2"&gt;"4"&lt;/span&gt;,&lt;span class="s2"&gt;"twitter.com"&lt;/span&gt;,&lt;span class="s2"&gt;"10.00"&lt;/span&gt;

$ awk -F &lt;span class="s2"&gt;"\"*,\"*"&lt;/span&gt; &lt;span class="s1"&gt;'{if(NR&amp;gt;1)print $2}'&lt;/span&gt; top10milliondomains.csv.zip &lt;span class="p"&gt;|&lt;/span&gt; sort &amp;gt; domcop

&lt;span class="c1"&gt;# domains after sorting alphabetically&lt;/span&gt;
$ head -n &lt;span class="m"&gt;5&lt;/span&gt; domcop
00000000b.com
000000book.com
&lt;span class="m"&gt;0000180&lt;/span&gt;.fortunecity.com
&lt;span class="m"&gt;000139418&lt;/span&gt;.wixsite.com
000fashions.blogspot.com
&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Majestic&lt;/span&gt;

$ wget http://downloads.majestic.com/majestic_million.csv

&lt;span class="c1"&gt;# data sorted by ranking&lt;/span&gt;
$ head -n &lt;span class="m"&gt;5&lt;/span&gt; majestic_million.csv
GlobalRank,TldRank,Domain,TLD,RefSubNets,RefIPs,IDN_Domain,IDN_TLD,PrevGlobalRank,PrevTldRank,PrevRefSubNets,PrevRefIPs
&lt;span class="m"&gt;1&lt;/span&gt;,1,google.com,com,474277,3016409,google.com,com,1,1,474577,3012875
&lt;span class="m"&gt;2&lt;/span&gt;,2,facebook.com,com,462854,3093315,facebook.com,com,2,2,462860,3090006
&lt;span class="m"&gt;3&lt;/span&gt;,3,youtube.com,com,422434,2504924,youtube.com,com,3,3,422377,2501555
&lt;span class="m"&gt;4&lt;/span&gt;,4,twitter.com,com,412950,2497935,twitter.com,com,4,4,413220,2495261

$ awk -F &lt;span class="s2"&gt;"\"*,\"*"&lt;/span&gt; &lt;span class="s1"&gt;'{if(NR&amp;gt;1)print $2}'&lt;/span&gt; majestic_million.csv &lt;span class="p"&gt;|&lt;/span&gt; sort &amp;gt; majestic

&lt;span class="c1"&gt;# domains after sorting alphabetically&lt;/span&gt;
$ head -n &lt;span class="m"&gt;5&lt;/span&gt; majestic
&lt;span class="m"&gt;00000&lt;/span&gt;.xn--p1ai
&lt;span class="m"&gt;0000666&lt;/span&gt;.com
&lt;span class="m"&gt;0000&lt;/span&gt;.jp
0000www.com
&lt;span class="m"&gt;0000&lt;/span&gt;.xn--p1ai
&lt;/pre&gt;


&lt;h4&gt;Comparing Data&lt;/h4&gt;
&lt;p&gt;We have collected and extracted domains from above sources. Lets compare the domains to see how similar they are using &lt;code&gt;comm&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ comm -123 alexa domcop --total
&lt;span class="m"&gt;871851&lt;/span&gt;  &lt;span class="m"&gt;871851&lt;/span&gt;  &lt;span class="m"&gt;128149&lt;/span&gt;  total

$ comm -123 alexa majestic --total
&lt;span class="m"&gt;788454&lt;/span&gt;  &lt;span class="m"&gt;788454&lt;/span&gt;  &lt;span class="m"&gt;211546&lt;/span&gt;  total

$ comm -123 domcop majestic --total
&lt;span class="m"&gt;784388&lt;/span&gt;  &lt;span class="m"&gt;784388&lt;/span&gt;  &lt;span class="m"&gt;215612&lt;/span&gt;  total
&lt;/pre&gt;


&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ comm -12 alexa domcop &lt;span class="p"&gt;|&lt;/span&gt; comm -123 - majestic --total
&lt;span class="m"&gt;31314&lt;/span&gt;   &lt;span class="m"&gt;903165&lt;/span&gt;  &lt;span class="m"&gt;96835&lt;/span&gt;   total
&lt;/pre&gt;


&lt;p&gt;So, only 96,835(9.6%) domains are common between all the datasets and the overlap between any two sources is ~20%. Here is a venn diagram showing the overlap between them.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://avilpage.com/images/million-alexa-majestic-domcop.png"&gt;
&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;We have collected data from alexa, domcorp &amp;amp; majestic, extracted domains from it and observed that there is only a small overlap between them.&lt;/p&gt;&lt;/div&gt;</description><category>command-line</category><category>data-analysis</category><category>python</category><guid>http://avilpage.com/2018/11/comparision-alexa-majestic-domcorp-top-million-sites.html</guid><pubDate>Fri, 02 Nov 2018 06:34:58 GMT</pubDate></item><item><title>Linux Performance Analysis In Less Than 10 Seconds</title><link>http://avilpage.com/2018/07/linux-performance-analysis-in-seconds.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;If you are using a Linux System or managing a Linux server, you might come across a situation where a process is taking too long to complete. In this article we will see how to track down such performance issues in Linux.&lt;/p&gt;
&lt;p&gt;Netflix TechBlog has an article on how to &lt;a href="https://medium.com/netflix-techblog/linux-performance-analysis-in-60-000-milliseconds-accc10403c55"&gt;anlyze Linux performance in 60 seconds&lt;/a&gt;. This article  provides 10+ tools to use in order to see the resource usage and pinpoint the bottleneck.&lt;/p&gt;
&lt;p&gt;It is strenuous to remember all those tools/options and laborious to run all those commands when working on multiple systems.&lt;/p&gt;
&lt;p&gt;Instead, we can use &lt;a href="http://atoptool.nl/"&gt;atop&lt;/a&gt;, a tool for one stop solution for performance analysis. Here is a comparision of atop with other tools from &lt;a href="https://lwn.net/Articles/387202/"&gt;LWN&lt;/a&gt;.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://avilpage.com/images/linux-performance-analysis-tools.png" height="300px" width="600"&gt;
&lt;/p&gt;

&lt;p&gt;atop shows live &amp;amp; historical data measurement at system level as well as process level. To get the glimpse of system resource(CPU, memory, network, disk) usage install and run atop with&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install --yes atop

$ atop
&lt;/pre&gt;


&lt;p align="center"&gt;
&lt;img src="http://avilpage.com/images/atop.png" height="300px" width="600"&gt;
&lt;/p&gt;

&lt;p&gt;By default, atop shows resources used in the last interval only and sorts them by CPU usage. We can use&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ atop -A -f &lt;span class="m"&gt;4&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;-A&lt;/code&gt; sorts the processes automatically in the order of the most busy system resource.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; shows both active as well as inactive system resources in the ouput.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;4&lt;/code&gt; sets refresh interval to 4 seconds.&lt;/p&gt;
&lt;p&gt;Just by looking at the output of atop, we get a glimpse of overall system resource usage as well as individual processes resource usage.&lt;/p&gt;&lt;/div&gt;</description><category>command-line</category><category>linux</category><guid>http://avilpage.com/2018/07/linux-performance-analysis-in-seconds.html</guid><pubDate>Tue, 24 Jul 2018 15:51:21 GMT</pubDate></item><item><title>Concurrent Downloads - Bash Vs Python</title><link>http://avilpage.com/2016/05/concurrent-downloads-bash-vs-python.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                I just found one more free telugu book &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;Graded
      readings in modern literary Telugu&lt;/code&gt; by Golla Narayanaswami Reddy and Dan M Matson in &lt;a href="http://dsal.uchicago.edu/digbooks/dig_toc.html?BOOKID=PL4775.R4_1967" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;"&gt;Digital South Asia Library&lt;/a&gt;.
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                Unfortunately they didn't provide it as an ebook but as a set of 221 tif images.
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                I wrote a simple for loop in shell which downloaded all images one by one using &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;wget&lt;/code&gt;.
            &lt;/div&gt;
            &lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                &lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;
      $ base_url=&lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;http://dsal.uchicago.edu&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;br&gt;$ url=&lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;&lt;span class="pl-smi" style="box-sizing: border-box; color: #333333;"&gt;$base_url&lt;/span&gt;/digbooks/images/PL4775.R4_1967/PL4775.R4_1967_%03g.gif&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;br&gt;$ &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;time&lt;/span&gt; -p sh -c &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;for i in $(seq -f $url 1 221); do; wget $i; done;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                I took 375 seconds for that. This was too slow. So I tried to download them parallelly using xargs.
            &lt;/div&gt;
            &lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                &lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;
      $ &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;time&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;echo&lt;/span&gt; &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;$(&lt;/span&gt;seq -f &lt;span class="pl-smi" style="box-sizing: border-box; color: #333333;"&gt;$url&lt;/span&gt; 1 221&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;|&lt;/span&gt; xargs -n 1 -P 36 wget&lt;/pre&gt;
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                My laptop has a quad core processor. So I tried with 20, 24, 28, 32 process at a time.
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                With &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;wget+xargs&lt;/code&gt;,
                the best timing is 13 seconds (CPU: 15%, Process: 28).
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                Again I tried downloading them parallelly but with GNU parallel.
            &lt;/div&gt;
            &lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                &lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;
      $ &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;time&lt;/span&gt; seq -f &lt;span class="pl-smi" style="box-sizing: border-box;"&gt;$url&lt;/span&gt; 1 221 &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;|&lt;/span&gt; parallel -j36 wget {}&lt;/pre&gt;
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                With &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;wget+parallel&lt;/code&gt;,
                the best timing is 12 seconds (CPU: 48%, Process: 24).
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                Here is cpu consumption and time taken at each step.
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                &lt;a href="https://cloud.githubusercontent.com/assets/4463796/15634659/08965d50-25e7-11e6-9f3e-02fe008997a1.png" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;" target="_blank"&gt;&lt;img alt="paralle_python_bash2" src="https://cloud.githubusercontent.com/assets/4463796/15634659/08965d50-25e7-11e6-9f3e-02fe008997a1.png" style="border: 0px; box-sizing: border-box; max-width: 100%;"&gt;&lt;/a&gt;
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                Once I have done with bash, I decided to try the same things with Python and see how it goes.
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                I wrote a simple script using requests to download images.
            &lt;/div&gt;
            &lt;div class="highlight highlight-source-python" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                &lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;
                    &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; shutil&lt;br&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; sys&lt;br&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;from&lt;/span&gt; concurrent &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; futures&lt;br&gt;&lt;br&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; requests&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;def&lt;/span&gt; &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;download_image&lt;/span&gt;(&lt;span class="pl-smi" style="box-sizing: border-box;"&gt;url&lt;/span&gt;):&lt;br&gt;    r &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; requests.get(url)&lt;br&gt;    file_name &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; url.split(&lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;/&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;)[&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;-&lt;/span&gt;&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;1&lt;/span&gt;]&lt;br&gt;    &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;with&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;open&lt;/span&gt;(file_name, &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;wb&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;as&lt;/span&gt; fh:&lt;br&gt;        fh.write(r.content)&lt;br&gt;&lt;br&gt;&lt;br&gt;base_url &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;http://dsal.uchicago.edu&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;book_url &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; base_url &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;+&lt;/span&gt; &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;/digbooks/images/PL4775.R4_1967/PL4775.R4_1967_&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;{}&lt;/span&gt;.gif&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;urls &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; [book_url.format(&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;str&lt;/span&gt;(i).zfill(&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;3&lt;/span&gt;)) &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;for&lt;/span&gt; i &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;in&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;range&lt;/span&gt;(&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;1&lt;/span&gt;, &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;221&lt;/span&gt;)]&lt;br&gt;&lt;br&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;def&lt;/span&gt; &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;download_serially&lt;/span&gt;():&lt;br&gt;    &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;for&lt;/span&gt; url &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;in&lt;/span&gt; urls:&lt;br&gt;        download_image(url)&lt;br&gt;&lt;br&gt;download_serially()&lt;/pre&gt;
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                This took 244 seconds.
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                To download images parallelly, I have used &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;Threadpoolexecutor&lt;/code&gt; from &lt;a href="https://docs.python.org/3.5/library/concurrent.futures.html" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;"&gt;concurrent module&lt;/a&gt;.
            &lt;/div&gt;
            &lt;div class="highlight highlight-source-python" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                &lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;
                    &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;def&lt;/span&gt; &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;download_parallely&lt;/span&gt;():&lt;br&gt;    workers &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;int&lt;/span&gt;(sys.argv[&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;1&lt;/span&gt;])&lt;br&gt;&lt;br&gt;    &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;with&lt;/span&gt; futures.ThreadPoolExecutor(&lt;span class="pl-v" style="box-sizing: border-box; color: #ed6a43;"&gt;max_workers&lt;/span&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt;workers) &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;as&lt;/span&gt; executor:&lt;br&gt;        result &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; executor.map(download_image, urls)&lt;br&gt;&lt;br&gt;download_parallely()&lt;/pre&gt;
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                I used previous script but just added one more function which queues tasks. Then I have executed the script with several options.
            &lt;/div&gt;
            &lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                &lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;
      $ &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;time&lt;/span&gt; python down.py 28&lt;/pre&gt;
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                Threadpoolexecutor documentation uses 5 times number of processors as max_workers by default. I tried same options which I have used for bash. Here is
                the overall comparision.
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                With &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;requests+ThreadPoolExecutor&lt;/code&gt;,
                the best timing is 12 seconds (CPU: 36%, Process: 28).
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                Here is the overall comparision.
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                &lt;a href="https://cloud.githubusercontent.com/assets/4463796/15634653/edadbb50-25e6-11e6-8f59-c908ca7d65b2.png" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;" target="_blank"&gt;&lt;img alt="paralle_python_bash" src="https://cloud.githubusercontent.com/assets/4463796/15634653/edadbb50-25e6-11e6-8f59-c908ca7d65b2.png" style="border: 0px; box-sizing: border-box; max-width: 100%;"&gt;&lt;/a&gt;
            &lt;/div&gt;
            &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
                &lt;span style="line-height: 25.6px;"&gt;For a simple concurrent download, xargs+wget seems to be the best option.&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
    </description><category>command-line</category><category>python</category><guid>http://avilpage.com/2016/05/concurrent-downloads-bash-vs-python.html</guid><pubDate>Sun, 29 May 2016 11:55:00 GMT</pubDate></item><item><title>Django Tips &amp; Tricks #1 - Useful Shell Aliases For Python/Django Developers</title><link>http://avilpage.com/2014/10/useful-shell-aliases-for-python-and.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;Developers and hackers prefer using terminal and spend a lot of time on it. Instead of typing long commands over and over, they can be aliased to shortnames. The shell builtin alias allows users to set aliases.&lt;/p&gt;
&lt;p&gt;One of the most used command while setting up development environment is &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; This can be aliased to &lt;code&gt;pir&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;


&lt;p&gt;Now to install requirements, type &lt;code&gt;pir&lt;/code&gt; and pressing enter. Here are some other aliases related to python which will be useful on a daily basis.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;py&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'python'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;ipy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ipython'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;py3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'python3'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;ipy3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ipython3'&lt;/span&gt;

&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;jn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'jupyter notebook'&lt;/span&gt;

&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;wo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'workon'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'pip freeze | sort'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'pip install'&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'pip uninstall'&lt;/span&gt;

&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;dj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;drs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py runserver"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;drp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py runserverplus"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;dsh&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py shell"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;dsp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py shell_plus"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;dsm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py schemamigration"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;dm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py migrate"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;dmm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py makemigrations"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;ddd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py dumpdata"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;dld&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py loaddata"&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"python manage.py test"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Just add the above aliases to your &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt;. That's it. Hpy alsng!&lt;/p&gt;&lt;/div&gt;</description><category>command-line</category><category>django</category><category>django-tips-tricks</category><category>python</category><guid>http://avilpage.com/2014/10/useful-shell-aliases-for-python-and.html</guid><pubDate>Sat, 25 Oct 2014 12:57:00 GMT</pubDate></item><item><title>Access Clipboard From Terminal In Ubuntu Using Xclip!</title><link>http://avilpage.com/2014/04/access-clipboard-from-terminal-in.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;If You are going back and forth between terminal and any other application, accessing system clipboard contents from command line will be invaluable.&lt;br&gt;&lt;br&gt;If You are using mac, there are inbuilt commands pbcopy &amp;amp; pbpaste. But in Ubuntu these are not available. You need to install a small utility called xclip. Go ahead and install it.&lt;br&gt;&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="text-align: center;"&gt;&lt;pre style="box-sizing: border-box;"&gt;&lt;code class="bash hljs " style="background-color: #333333; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; border-top-left-radius: 6px; border-top-right-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 1px 10px inset, rgba(255, 255, 255, 0.0980392) 0px 1px 0px, rgba(0, 0, 0, 0.498039) 0px -1px 0px; box-sizing: border-box; color: #eeeeee; display: block; padding: 15px 20px; position: relative; text-align: left;"&gt;&lt;span class="hljs-built_in" style="box-sizing: border-box; color: #268bd2;"&gt;sudo&lt;/span&gt; apt-get install xclip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;Now, You can copy any text ( or the output one command ) into the clipboard using xclip. To copy contents of fruits.txt to clipboard,&lt;br&gt;&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="text-align: center;"&gt;&lt;pre style="box-sizing: border-box;"&gt;&lt;code class="bash hljs " style="background-color: #333333; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; border-top-left-radius: 6px; border-top-right-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 1px 10px inset, rgba(255, 255, 255, 0.0980392) 0px 1px 0px, rgba(0, 0, 0, 0.498039) 0px -1px 0px; box-sizing: border-box; color: #eeeeee; display: block; padding: 15px 20px; position: relative; text-align: left;"&gt;cat fruits.txt | xclip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;If You want to see the contents of clipboard, You can use&lt;br&gt;&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="text-align: center;"&gt;&lt;pre style="box-sizing: border-box;"&gt;&lt;code class="bash hljs " style="background-color: #333333; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; border-top-left-radius: 6px; border-top-right-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 1px 10px inset, rgba(255, 255, 255, 0.0980392) 0px 1px 0px, rgba(0, 0, 0, 0.498039) 0px -1px 0px; box-sizing: border-box; color: #eeeeee; display: block; padding: 15px 20px; position: relative; text-align: left;"&gt;xclip -o&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;This copy and paste will work only in the terminal, If You switch to another application and try to paste there, it wont work.&lt;br&gt;&lt;br&gt;If You want to paste in another application, You need to copy like this&lt;br&gt;&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="text-align: center;"&gt;&lt;pre style="box-sizing: border-box;"&gt;&lt;code class="bash hljs " style="background-color: #333333; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; border-top-left-radius: 6px; border-top-right-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 1px 10px inset, rgba(255, 255, 255, 0.0980392) 0px 1px 0px, rgba(0, 0, 0, 0.498039) 0px -1px 0px; box-sizing: border-box; color: #eeeeee; display: block; padding: 15px 20px; position: relative; text-align: left;"&gt;cat fruits.txt | xclip -selection clipboard&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;Now, You can switch to any other application &amp;amp; You can paste (CTRL + V) the contents.&lt;br&gt;&lt;br&gt;&lt;h2 style="text-align: left;"&gt;Tip:&lt;/h2&gt;Instead of typing all of this everytime, You can setup alias in .bashrc file&lt;br&gt;&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="text-align: center;"&gt;&lt;pre style="box-sizing: border-box;"&gt;&lt;code class="bash hljs " style="background-color: #333333; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; border-top-left-radius: 6px; border-top-right-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 1px 10px inset, rgba(255, 255, 255, 0.0980392) 0px 1px 0px, rgba(0, 0, 0, 0.498039) 0px -1px 0px; box-sizing: border-box; display: block; padding: 15px 20px; position: relative; text-align: left;"&gt;&lt;span style="color: #eeeeee;"&gt;alias c='xclip -selection clipboard'&lt;br&gt;alias v='xclip -o'&lt;/span&gt;&lt;span style="color: #eeeeee;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/code&gt;&lt;div style="text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;Now You can easily copy the contents like this&lt;br&gt;&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="text-align: center;"&gt;&lt;pre style="box-sizing: border-box;"&gt;&lt;code class="bash hljs " style="background-color: #333333; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; border-top-left-radius: 6px; border-top-right-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 1px 10px inset, rgba(255, 255, 255, 0.0980392) 0px 1px 0px, rgba(0, 0, 0, 0.498039) 0px -1px 0px; box-sizing: border-box; display: block; padding: 15px 20px; position: relative; text-align: left;"&gt;&lt;span style="color: #eeeeee;"&gt;cat fruits.txt | c&lt;/span&gt;&lt;/code&gt;&lt;div style="text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;I found this a lot helpful while switching between browser and terminal.&lt;br&gt;&lt;br&gt;&lt;/div&gt;</description><category>command-line</category><category>ubuntu</category><guid>http://avilpage.com/2014/04/access-clipboard-from-terminal-in.html</guid><pubDate>Sun, 20 Apr 2014 14:01:00 GMT</pubDate></item></channel></rss>