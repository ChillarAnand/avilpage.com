<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avil Page (Posts about productivity)</title><link>http://avilpage.com/</link><description></description><atom:link href="http://avilpage.com/tags/productivity.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 26 Mar 2018 14:07:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Generate Sphinx Friendly Docstrings For Python Functions In Emacs!</title><link>http://avilpage.com/2014/12/generate-sphinx-friendly-docstrings-for.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Today, I went to &lt;a href="http://www.meetup.com/Bangalore-Django-User-Group/events/219082263/" target="_blank"&gt;Django REST Framework Workshop&lt;/a&gt;. After the workshop is completed,  and we were discussing about Emacs, &lt;a href="http://www.kracekumar.com/" target="_blank"&gt;Krace&lt;/a&gt; showed this cool plugin &lt;a href="https://github.com/naiquevin/sphinx-doc.el" target="_blank"&gt;sphinx-doc&lt;/a&gt;, it inserts docstring skeleton for Python functions/methods as per the requirement of the Sphinx documentation generator.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-FHLnsul5mEg/VIxxkDO3ttI/AAAAAAAANeI/Q8xYC9S-MMg/s1600/emacs-python-sphinx.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-FHLnsul5mEg/VIxxkDO3ttI/AAAAAAAANeI/Q8xYC9S-MMg/s1600/emacs-python-sphinx.gif" height="560" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;br&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Installation:&lt;/h3&gt;To install it from MELPA, run &lt;i&gt;"M-x package-list-packages"&lt;/i&gt;, search for &lt;i&gt;"sphinx-doc" , m&lt;/i&gt;ark it with i and press x to install.&lt;br&gt;&lt;br&gt;&lt;h3 style="text-align: left;"&gt;Configuration:&lt;/h3&gt;Add these lines to Your emacs config to enable sphinx-doc-mode.&lt;br&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;(add-hook 'python-mode-hook (lambda ()&lt;br&gt;                  (require 'sphinx-doc)&lt;br&gt;                  (sphinx-doc-mode t)))&lt;/pre&gt;&lt;/div&gt;If you document your code(infact you should), this plugin saves quite a few strokes!  &lt;/div&gt;</description><category>django</category><category>emacs</category><category>emacs packages</category><category>plugins</category><category>productivity</category><category>python</category><category>sphinx</category><category>tech</category><guid>http://avilpage.com/2014/12/generate-sphinx-friendly-docstrings-for.html</guid><pubDate>Sat, 13 Dec 2014 11:59:00 GMT</pubDate></item><item><title>Automagically Reload Imports In iPython!</title><link>http://avilpage.com/2014/11/python-automagically-reload-imports-in.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;When using iPython, users can import required modules to test them. After importing them, if they get modified either by user or some other process, users have to reload it for futher usage.&lt;/p&gt;
&lt;p&gt;Depending on the Python version, appropriate &lt;code&gt;reload&lt;/code&gt; function can reload modules.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Python 2.x&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Python 3.0–3.3&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Python 3.4+&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;importlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Instead of manually reloading, ipython has &lt;code&gt;autoreload&lt;/code&gt; extention which can auto reload modules. For that, load the extention and activate it.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;load_ext&lt;/span&gt; &lt;span class="n"&gt;autoreload&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;autoreload&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This can be added to ipython config file so that autoreload gets activated, whenver it starts.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ ipython profile create
&lt;/pre&gt;


&lt;p&gt;This creates a default config file. Open config file which is present at &lt;code&gt;~/.ipython/profile_default/ipython_config.py&lt;/code&gt;  and add these two lines to it.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;c.InteractiveShellApp.extensions = ['autoreload']
c.InteractiveShellApp.exec_lines = ['%autoreload 2']
&lt;/pre&gt;


&lt;p&gt;Note that it won't reloads c extensions automatically.&lt;/p&gt;&lt;/div&gt;</description><category>ipython</category><category>productivity</category><guid>http://avilpage.com/2014/11/python-automagically-reload-imports-in.html</guid><pubDate>Wed, 19 Nov 2014 11:51:00 GMT</pubDate></item></channel></rss>