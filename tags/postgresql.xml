<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Avil Page (Posts about postgresql)</title><link>http://avilpage.com/</link><description></description><atom:link href="http://avilpage.com/tags/postgresql.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Tue, 30 Apr 2019 17:53:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>A Short Guide To Debugging PostgreSQL Triggers</title><link>http://avilpage.com/2019/04/how-to-debug-postgres-triggers.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.postgresql.org/docs/9.1/sql-createtrigger.html"&gt;PostgreSQL triggers&lt;/a&gt; will associate a &lt;code&gt;function&lt;/code&gt; to a table for an event. If multiple triggers of the same kind are defined for the same event, they will executed in alphabetical order by name.&lt;/p&gt;
&lt;p&gt;In this article we will see how to debug PostgreSQL triggers.&lt;/p&gt;
&lt;h4&gt;Triggers&lt;/h4&gt;
&lt;p&gt;First ensure triggers are enabled on the required tables for INSERT/UPDATE/DELETE events. We can check available triggers by running the following query.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We can also use &lt;code&gt;EXPLAIN&lt;/code&gt; to show triggers which are executed for an event by running relevant queries.&lt;/p&gt;
&lt;h4&gt;PostgreSQL Logging&lt;/h4&gt;
&lt;p&gt;After ensuring triggers are applied correctly, set logging level for postgresql server and client in postgres.conf file.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="n"&gt;queries&lt;/span&gt;
&lt;span class="n"&gt;log_statement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'all'&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="k"&gt;level&lt;/span&gt;
&lt;span class="n"&gt;client_min_messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Restart postgresql to reflect configuration changes.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Linux&lt;/span&gt;
sudo service postgres restart

&lt;span class="c1"&gt;# Mac&lt;/span&gt;
brew services restart postgres
&lt;/pre&gt;


&lt;p&gt;Tail the logs and check if queries are executing correctly with appropriate values.&lt;/p&gt;
&lt;h4&gt;Triggers Logging&lt;/h4&gt;
&lt;p&gt;After enabling logging for PostgreSQL, we can &lt;a href="https://www.postgresql.org/docs/9.0/plpgsql-errors-and-messages.html"&gt;raise messages/errors in triggers&lt;/a&gt; so that we can see if any unexpected things are happening at any point in the trigger.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="s1"&gt;'Updating row with ID: %'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="n"&gt;division_by_zero&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;RAISE&lt;/span&gt; &lt;span class="n"&gt;WARNING&lt;/span&gt; &lt;span class="s1"&gt;'Unable to deleted record'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This makes sure triggers are executing as expected and if there are any warnings/errors, it will log a message.&lt;/p&gt;
&lt;h4&gt;SQL/PostgreSQL Gotchas&lt;/h4&gt;
&lt;p&gt;Even though queries and triggers are executing correctly, we might not see the desired result because of potentially suprising behaviour of PostgreSQL. There are a some scenarios where PostgreSQL seems to be not working at first but it actually is the expected behaviour.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unquoted object names will be treated as lower case. &lt;code&gt;SELECT FOO FROM bar&lt;/code&gt; will become &lt;code&gt;SELECT foo FROM bar&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Comparing nullable fields. This might yield strange results as &lt;code&gt;NULL != NULL&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;PostgreSQL uses POSIX offsets. For &lt;code&gt;04:21:42 UTC+01&lt;/code&gt;, +1  means the timezone is west of Greenwich.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;By being aware of common PostgreSQL gotchas and enabling logging for PostgreSQL client, server &amp;amp; triggers, pinpointing the bug in triggers becomes easy. Once the bug is identified, appropriate action can be taken to fix the issue.&lt;/p&gt;
&lt;!-- links --&gt;&lt;/div&gt;</description><category>database</category><category>debug</category><category>postgresql</category><guid>http://avilpage.com/2019/04/how-to-debug-postgres-triggers.html</guid><pubDate>Tue, 30 Apr 2019 15:51:21 GMT</pubDate></item></channel></rss>