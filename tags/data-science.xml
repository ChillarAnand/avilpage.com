<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avil Page (Posts about data-science)</title><link>https://avilpage.com/</link><description></description><atom:link href="https://avilpage.com/tags/data-science.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 04 Jul 2023 23:27:18 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using LSTM-CTC For Complex Script Recognition</title><link>https://avilpage.com/2017/07/using-lstm-ctc-for-complex-script-recognistion.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;p&gt;Most Indian languages have strong consonant-vowel structures which combine to give syllables. These syllables are written as one continuous ligature and they require &lt;a href="https://en.wikipedia.org/wiki/Complex_text_layout"&gt;complex text rendering&lt;/a&gt; (CTL) for type setting.&lt;/p&gt;
&lt;p&gt;Writing OCR (Optical Character Recognition) software for CTL scripts is a challenging task as segmentation is hard. Because of this overall accuracy drops drastically.&lt;/p&gt;
&lt;p&gt;A better approach is to use Connectionist Temporal Classification&lt;sup id="fnref:ctc"&gt;&lt;a class="footnote-ref" href="https://avilpage.com/2017/07/using-lstm-ctc-for-complex-script-recognistion.html#fn:ctc"&gt;1&lt;/a&gt;&lt;/sup&gt;(CTC) which can identify unsegmented sequence directly as it has a one-to-one correspondence between input samples and output labels.&lt;/p&gt;
&lt;p&gt;Here is a sample input and output of an &lt;a href="https://github.com/rakeshvar/rnn_ctc"&gt;RNN-CTC&lt;/a&gt; network which takes an unsegmented sequence and outputs labels.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="https://avilpage.com/images/ctc.png"&gt;
&lt;/p&gt;

&lt;p&gt;Open-source OCR software &lt;a href="https://github.com/tmbdev/ocropy/"&gt;ocorpy&lt;/a&gt; uses BLSTM-CTC for text recognition. &lt;a href="https://github.com/tesseract-ocr/tesseract"&gt;Tesseract&lt;/a&gt; started using the same in its latest(4.0) version.&lt;/p&gt;
&lt;p&gt;I have &lt;a href="https://github.com/ChillarAnand/likitham"&gt;trained a model&lt;/a&gt; to recognize Telugu script using Ocropy and the accuracy is ~99% which is far better when compared to OCR software without CTC which are accurate to ~70%.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:ctc"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Connectionist_temporal_classification"&gt;https://en.wikipedia.org/wiki/Connectionist_temporal_classification&lt;/a&gt; &lt;a class="footnote-backref" href="https://avilpage.com/2017/07/using-lstm-ctc-for-complex-script-recognistion.html#fnref:ctc" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>artificial-intelligence</category><category>data-science</category><category>python</category><guid>https://avilpage.com/2017/07/using-lstm-ctc-for-complex-script-recognistion.html</guid><pubDate>Sat, 22 Jul 2017 14:09:32 GMT</pubDate></item></channel></rss>