<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avil Page (Posts about dicom)</title><link>https://avilpage.com/</link><description></description><atom:link href="https://avilpage.com/tags/dicom.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 04 Mar 2023 05:12:17 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Mastering DICOM - #3 Setup Modality Worklist SCP</title><link>https://avilpage.com/2022/07/dicom-modality-worklist-scp.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;In the earlier article, we have learnt how to setup DICOM for digging deeper into DICOM protocol. In this article, let us learn how to setup a modality worklist(WML) SCP. Modalities can send C-FIND queries to this SCP and retrieve worklist information&lt;/p&gt;
&lt;h4&gt;Using Orthanc Worklist Plugin&lt;/h4&gt;
&lt;p&gt;Orthanc server has worklist plugin&lt;sup id="fnref:owp"&gt;&lt;a class="footnote-ref" href="https://avilpage.com/2022/07/dicom-modality-worklist-scp.html#fn:owp"&gt;1&lt;/a&gt;&lt;/sup&gt; which will serve worklist files that are stored in a particular directory. Let us download sample worklist files from Orthanc repository and keep in "WorklistDatabase" directory.&lt;/p&gt;
&lt;p&gt;Generate default configuration by running the following command.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ ./Orthanc --config&lt;span class="o"&gt;=&lt;/span&gt;config.json
&lt;/pre&gt;
&lt;p&gt;In the orthanc configuration file, enable worklist plugin, specify the worklist database directory so that Orthanc can locate relevant worklist files, add required modalities and restart the server.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;  "Plugins" : [
    "libModalityWorklists.dylib"
  ],

  "Worklists" : {
    "Enable": true,
    "Database": "./WorklistsDatabase",
    "FilterIssuerAet": false,
    "LimitAnswers": 0
  },

  "DicomModalities" : {
      "PYNETDICOM" : ["PYNETDICOM", "127.0.0.1", 4243],
      "FINDSCU" : ["FINDSCU", "127.0.0.1", 4244]
  }
&lt;/pre&gt;
&lt;p&gt;Once the plugin is enabled, we can use findscu to send C-FIND query.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ findscu -W -k &lt;span class="s2"&gt;"ScheduledProcedureStepSequence"&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="m"&gt;4242&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This will retrieve all worklist files from the server.&lt;/p&gt;
&lt;h4&gt;Using wlmscpfs&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;dcmtk&lt;/code&gt; &lt;sup id="fnref:dcmtk"&gt;&lt;a class="footnote-ref" href="https://avilpage.com/2022/07/dicom-modality-worklist-scp.html#fn:dcmtk"&gt;2&lt;/a&gt;&lt;/sup&gt; is a collection of utilities for DICOM standard. It has &lt;code&gt;wlmscpfs&lt;/code&gt; application which implements basic Service Class Provider(SCP). We can start the service by running the following command.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;wlmscpfs --debug --data-files-path WorklistsDatabase 4242
&lt;/pre&gt;
&lt;p&gt;Once the service is started modalities can send C-FIND query to this service.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;We have seen how to setup MWL SCP using Orthanc &amp;amp; wmlscpfs. Now that we have PACS &amp;amp; WML SCP up and running, in the next article lets see how to dig deeper in to the dicom standard.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:owp"&gt;
&lt;p&gt;&lt;a href="https://book.orthanc-server.com/plugins/worklists-plugin.html"&gt;https://book.orthanc-server.com/plugins/worklists-plugin.html&lt;/a&gt; &lt;a class="footnote-backref" href="https://avilpage.com/2022/07/dicom-modality-worklist-scp.html#fnref:owp" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:dcmtk"&gt;
&lt;p&gt;&lt;a href="https://github.com/DCMTK/dcmtk"&gt;https://github.com/DCMTK/dcmtk&lt;/a&gt; &lt;a class="footnote-backref" href="https://avilpage.com/2022/07/dicom-modality-worklist-scp.html#fnref:dcmtk" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>dicom</category><category>HealthIT</category><guid>https://avilpage.com/2022/07/dicom-modality-worklist-scp.html</guid><pubDate>Sun, 31 Jul 2022 12:49:29 GMT</pubDate></item><item><title>Mastering DICOM - #2 Setup Orthanc DICOM Server</title><link>https://avilpage.com/2021/03/setup-orthanc-demo-server.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;p&gt;This is a series of &lt;a href="https://avilpage.com/tags/dicom.html"&gt;articles on mastering Dicom&lt;/a&gt;. In the earlier article, we have learnt how PACS/DICOM simplifies the clinical work flow.&lt;/p&gt;
&lt;p&gt;In this article, lets setup a dicom server so that we have a server to play around with Dicom files.&lt;/p&gt;
&lt;h4&gt;Orthanc Server&lt;/h4&gt;
&lt;p&gt;There are several Dicom servers like Orthanc, Dicoogle etc. &lt;a href="https://en.wikipedia.org/wiki/Orthanc_(server)"&gt;Orthanc&lt;/a&gt; is a lightweight open source dicom server and is widely used by many Health care organisations.&lt;/p&gt;
&lt;p&gt;Sébastien Jodogne, original author of Orthanc maintains docker images. We can use these images to run Orthanc server locally.&lt;/p&gt;
&lt;p&gt;Ensure docker is installed on the machine and then run the following command to start Orthanc server.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ docker run -p &lt;span class="m"&gt;4242&lt;/span&gt;:4242 -p &lt;span class="m"&gt;8042&lt;/span&gt;:8042 --rm &lt;span class="se"&gt;\&lt;/span&gt;
    jodogne/orthanc-python
&lt;/pre&gt;
&lt;p&gt;Once the server is started, we can visit &lt;a href="http://localhost:8042"&gt;http://localhost:8042&lt;/a&gt; and explore Orthanc server.&lt;/p&gt;
&lt;h4&gt;Heroku Deployment&lt;/h4&gt;
&lt;p&gt;Heroku is PAAS platform which supports docker deployments. Lets deploy Orthac server to Heroku for testing.&lt;/p&gt;
&lt;p&gt;By default, Orthanc server runs on 8042 port as defined in the config file. Heroku dynamically assigns port for the deployed process.&lt;/p&gt;
&lt;p&gt;We can write a shell script which will read port number from environment variable, replace it in Orthanc configuration file and then start Orthanc server.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#! /bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -x

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PORT&lt;/span&gt;

sed &lt;span class="s1"&gt;'s/ : 8042/ : '&lt;/span&gt;&lt;span class="nv"&gt;$PORT&lt;/span&gt;&lt;span class="s1"&gt;'/g'&lt;/span&gt; -i /etc/orthanc/orthanc.json

Orthanc /etc/orthanc/
&lt;/pre&gt;
&lt;p&gt;We can use this shell script as entry point in docker as follows.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;FROM jodogne/orthanc-python

EXPOSE $PORT

WORKDIR /app
ADD . /app

ENTRYPOINT [ "./run.sh" ]
&lt;/pre&gt;
&lt;p&gt;We can create a new app in heroku and we can deploy this container.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;$ heroku apps:create orthanc-demo

$ heroku container:push web
$ heroku container:release web
&lt;/pre&gt;
&lt;p&gt;Once the deployment is completed, we can access our app from the endpoint provided by heroku. Here is a &lt;a href="https://orthanc-demo.herokuapp.com"&gt;orthanc demo server&lt;/a&gt; running on heroku.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;In this article, we have learnt how to setup Orthanc server and deployed it to Heroku. In the next article, let dig deeper into dicom protocol by upload/accessing dicom files to the server.&lt;/p&gt;</description><category>dicom</category><category>HealthIT</category><guid>https://avilpage.com/2021/03/setup-orthanc-demo-server.html</guid><pubDate>Fri, 26 Mar 2021 00:30:00 GMT</pubDate></item><item><title>Mastering DICOM - #1 Clinical Workflows 101</title><link>https://avilpage.com/2019/12/mastering-dicom-part-1.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;In hospitals, &lt;a href="https://en.wikipedia.org/wiki/Picture_archiving_and_communication_system"&gt;PACS&lt;/a&gt; simplifies the clinical workflow by reducing physical and time barriers. A typical radiology workflow looks like this.&lt;/p&gt;
&lt;p algin="center"&gt;
&lt;img src="https://avilpage.com/images/dicom-pacs-python1.png"&gt;
&lt;/p&gt;

&lt;p&gt;Credit: &lt;cite&gt;Wikipedia&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;A patient as per doctor's request will visit a radiology center to undergo CT/MRI/X-RAY. Data captured from modality(medical imaging equipments like CT/MRI machine) will be sent to QA for verfication and then sent to PACS for archiving.&lt;/p&gt;
&lt;p&gt;After this when patient visits doctor, doctor can see this study on his workstation(which has DICOM viewer) by entering patient details.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://avilpage.com/tags/dicom.html"&gt;this series of articles&lt;/a&gt;, we will how to achieve this seamless transfer of medical data digitally with DICOM.&lt;/p&gt;
&lt;h4&gt;DICOM standard&lt;/h4&gt;
&lt;p&gt;DICOM modalities create files in DICOM format. This file has dicom header which contains meta data and dicom data set which has modality info(equipment information, equipment configuration etc), patient information(name, sex etc) and the image data.&lt;/p&gt;
&lt;p&gt;Storing and retreiving DICOM files from PACS servers is generally achieved through DIMSE DICOM for desktop applications and DICOMWeb for web applications.&lt;/p&gt;
&lt;p&gt;All the machines which transfer/receive DICOM data must follow DICOM standard. With this all the DICOM machines which are in a network can store and retrieve DICOM files from PACS.&lt;/p&gt;
&lt;p&gt;When writing software to handle DICOM data, there are third party packages to handle most of the these things for us.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python(&lt;a href="https://pypi.org/project/pydicom/"&gt;pydicom&lt;/a&gt;, &lt;a href="https://pypi.org/project/pynetdicom/"&gt;pynetdicom&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby (&lt;a href="https://rubygems.org/gems/dicom/"&gt;ruby-dicom&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R (&lt;a href="https://CRAN.R-project.org/package=oro.dicom"&gt;oro.dicom&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C/C++ (&lt;a href="https://dicom.offis.de/dcmtk"&gt;dcmtoolkit&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;In this article, we have learnt the clinical radiology workflow and how DICOM standard is useful in digitally transferring data between DICOM modalities.&lt;/p&gt;
&lt;p&gt;In the next article, we will dig into DICOM file formats and learn about the structure of DICOM data.&lt;/p&gt;</description><category>dicom</category><category>HealthIT</category><category>python</category><guid>https://avilpage.com/2019/12/mastering-dicom-part-1.html</guid><pubDate>Tue, 31 Dec 2019 13:29:09 GMT</pubDate></item></channel></rss>