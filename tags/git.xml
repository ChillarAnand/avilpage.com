<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avil Page (Posts about git)</title><link>https://avilpage.com/</link><description></description><atom:link href="https://avilpage.com/tags/git.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 05 Nov 2022 02:53:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Git Etiquette: Meaningful Messages &amp; Linear Logs!</title><link>https://avilpage.com/2015/06/git-etiquette-meaningful-messages.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;Why Elegant Git Logs Matter?&lt;/h3&gt;I will show You few commit messages &amp;amp; logs from two different projects. Based only on those messages/logs, You need to decide which project is the best.&lt;br&gt;&lt;br&gt;&lt;h4 style="text-align: left;"&gt;Project 1:&lt;/h4&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-B6ywHekOKj8/VYGjD0HcA0I/AAAAAAAANwc/HzOOlPQRDuo/s1600/git-log8.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="552" src="http://2.bp.blogspot.com/-B6ywHekOKj8/VYGjD0HcA0I/AAAAAAAANwc/HzOOlPQRDuo/s640/git-log8.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-oBfd3GDwnU8/VYGjDFVOxgI/AAAAAAAANwQ/5Kooota69H8/s1600/git-log4.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em; text-align: center;"&gt;&lt;img border="0" height="339" src="http://3.bp.blogspot.com/-oBfd3GDwnU8/VYGjDFVOxgI/AAAAAAAANwQ/5Kooota69H8/s640/git-log4.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;h4 style="text-align: left;"&gt;Project 2:&lt;/h4&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-P1J1lUyA0No/VYGjEC-jn1I/AAAAAAAANwg/_aCRJamsfdA/s1600/git-log9.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="496" src="http://3.bp.blogspot.com/-P1J1lUyA0No/VYGjEC-jn1I/AAAAAAAANwg/_aCRJamsfdA/s640/git-log9.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-V9Mo7qYzqzM/VYGjD8z6vXI/AAAAAAAANwY/T4mxPsj51XA/s1600/git-log6.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="318" src="http://2.bp.blogspot.com/-V9Mo7qYzqzM/VYGjD8z6vXI/AAAAAAAANwY/T4mxPsj51XA/s640/git-log6.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;I hope that explains why We need  to maintain elegant git logs.&lt;br&gt;&lt;br&gt;&lt;h3 style="text-align: left;"&gt;How To Maintain Elegant Logs?&lt;/h3&gt;&lt;br&gt;First let's see how to write good commit messages. There are several blog  posts  &amp;amp; guides about this. Here is the summary of all those taken from &lt;a href="http://chris.beams.io/posts/git-commit/" target="_blank"&gt;this article&lt;/a&gt;.&lt;br&gt;&lt;br&gt;1. Separate subject from body with a blank line&lt;br&gt;2. Limit the subject line to 50 characters&lt;br&gt;3. Capitalize the subject line&lt;br&gt;4. Do not end the subject line with a period&lt;br&gt;5. Use the imperative mood in the subject line&lt;br&gt;6. Wrap the body at 72 characters&lt;br&gt;7. Use the body to explain what and why vs. how&lt;br&gt;&lt;br&gt;If You are doing something hacky, writing a little message in commit on why you did that will help other developers to understand that a lot better. Even if You don't follow all rules, some of them will help you in writing great commit message next time. If You are mainainter of a project, ask Your team members to write meaningful messages.&lt;br&gt;&lt;br&gt;The next that need to be taken care is commits. If a team member or someone else has submitted a pull request, once you merge the commit, just rebase it to remove unnecessary merge commits from log. Also make sure to squash  redundant commits and You have almost a linear log.&lt;br&gt;&lt;div style="text-align: center;"&gt;&lt;br&gt;&lt;/div&gt;A side benefit of this is, You can see recent commit there instead of merge commit, if your project is hosted on github.&lt;br&gt;&lt;br&gt;&lt;div style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-nDLmU2DsDhs/VYGjB86NHJI/AAAAAAAANv4/pba4wkAWiMc/s1600/git-log2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="88" src="http://1.bp.blogspot.com/-nDLmU2DsDhs/VYGjB86NHJI/AAAAAAAANv4/pba4wkAWiMc/s400/git-log2.png" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;The two minutes You spent on writing a meaningful message or maintaining linear log will&lt;br&gt;will help You a  lot few months down the line &amp;amp; will save countless hours and sleepless nights for future contributors.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span style="background-color: white; color: #666666; font-family: 'Trebuchet MS', Trebuchet, Verdana, sans-serif; font-size: 16.7999992370605px; line-height: 20.1599979400635px;"&gt;Read more &lt;/span&gt;&lt;a href="http://www.avilpage.com/search/label/tech" style="background-color: white; color: #5421bb; font-family: 'Trebuchet MS', Trebuchet, Verdana, sans-serif; font-size: 16.7999992370605px; line-height: 20.1599979400635px; text-decoration: none;"&gt;articles about Technology!&lt;/a&gt;&lt;/div&gt;</description><category>git</category><category>tech</category><guid>https://avilpage.com/2015/06/git-etiquette-meaningful-messages.html</guid><pubDate>Wed, 17 Jun 2015 11:29:00 GMT</pubDate></item><item><title>[Git] Updating Cloned/Forked Repository On Local Machine and GitHub!</title><link>https://avilpage.com/2014/11/git-updating-clonedforked-repository-on.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;If You have forked a GitHub repo, after a few days/months later and the original master repo might change. So, it is essential to update your forked repo to reflect those changes. One simple solution is, you can delete it and fork again. But, if you have made any changes then you need some other solution.&lt;br&gt;&lt;br&gt;&lt;h3 style="text-align: left;"&gt;Updating Cloned Repo On Local Machine:&lt;/h3&gt;If you have cloned the repo to your local machine, you can add the original GitHub repository as a "remote". Then you can fetch all the branches from that original repository, and rebase your work to continue working on the upstream version.&lt;br&gt;&lt;br&gt;From command line you can do this&lt;br&gt;&lt;br&gt;Add the remote, call it "original":&lt;br&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;git remote add original https://github.com/whoever/whatever.git&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;Fetch all the branches of that remote into remote-tracking branches, such as original/master:&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;&lt;span style="background-color: transparent;"&gt;git fetch original&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;Make sure that you're on your master branch:&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;&lt;span style="background-color: transparent;"&gt;git checkout master&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;Rewrite your master branch so that any commits of yours that aren't already in upstream/master are replayed on top of that other branch:&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;&lt;span style="background-color: transparent;"&gt;git rebase original/master&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;If you don't want to rewrite the history of your master branch, (for example because other people may have cloned it) then you should merge it&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;&lt;span style="background-color: transparent;"&gt;git merge original/master&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;However, for making further pull requests that are as clean as possible, it's probably better to rebase.&lt;br&gt; If you've rebased your branch onto upstream/master you may need to force the push in order to push it to your own forked repository on GitHub. You'd do that with:&lt;br&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;&lt;span style="background-color: transparent;"&gt;git push -f origin master&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;h3 style="text-align: left;"&gt;Updating Forked Repo On GitHub:&lt;/h3&gt;If you have forked the repo on GitHub, then you can update it with web interface&lt;br&gt;&lt;br&gt;Go to your fork and issue a Pull Request.&lt;br&gt;By default this will be your fork on the right (head repo) requesting to push its commits and changes to the original repo (base repo) on the left.&lt;br&gt;Click the drop down for both base repo and head repo and select each other's repos. You want yours listed on the left (accepting changes) while the original repository is on the right (the one with changes to push). As illustrated in this image:&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://i.stack.imgur.com/qy04n.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://i.stack.imgur.com/qy04n.png" height="172" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;Send the pull request. If your fork has not had any changes, you should be able to automatically accept the merge.&lt;br&gt;&lt;br&gt;If your code somehow conflicts or is not quite clean enough, then this will not work to update via the GitHub web interface and you will need grab the code and resolve any conflicts on your machine before pushing back to your fork.&lt;br&gt;&lt;br&gt;Sources: StackOverflow, WebApps&lt;br&gt;&lt;br&gt;&lt;/div&gt;</description><category>git</category><guid>https://avilpage.com/2014/11/git-updating-clonedforked-repository-on.html</guid><pubDate>Sat, 22 Nov 2014 03:56:00 GMT</pubDate></item></channel></rss>