<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avil Page (Posts about 2022)</title><link>http://avilpage.com/</link><description></description><atom:link href="http://avilpage.com/tags/cat_2022.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 30 Sep 2022 08:00:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Integrating Frappe Health with SNOMED CT</title><link>http://avilpage.com/2022/08/frappe-health-snomed-ct.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;Frappe Health&lt;sup id="fnref:FH"&gt;&lt;a class="footnote-ref" href="http://avilpage.com/2022/08/frappe-health-snomed-ct.html#fn:FH"&gt;1&lt;/a&gt;&lt;/sup&gt; is an open-source Healthcare Information System(HIS), to efficiently manage clinics, hospitals, and other healthcare organizations. Frappe Health is built on the Frappe Framework&lt;sup id="fnref:ff"&gt;&lt;a class="footnote-ref" href="http://avilpage.com/2022/08/frappe-health-snomed-ct.html#fn:ff"&gt;2&lt;/a&gt;&lt;/sup&gt;, a low code highly customizable framework.&lt;/p&gt;
&lt;p&gt;Frappe Health provides support for integrating various medical coding standards&lt;sup id="fnref:mcs"&gt;&lt;a class="footnote-ref" href="http://avilpage.com/2022/08/frappe-health-snomed-ct.html#fn:mcs"&gt;3&lt;/a&gt;&lt;/sup&gt;. In the patient encounter doctype, doctors can search and add pre-configured medical codes.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://avilpage.com/images/snomed-frappe-health1.png"&gt;&lt;/p&gt;
&lt;p&gt;In this article, let’s see how to integrate Frappe Health with SNOMED CT.&lt;/p&gt;
&lt;h4&gt;SNOMED CT Integration&lt;/h4&gt;
&lt;p&gt;SNOMED CT&lt;sup id="fnref:snomed"&gt;&lt;a class="footnote-ref" href="http://avilpage.com/2022/08/frappe-health-snomed-ct.html#fn:snomed"&gt;4&lt;/a&gt;&lt;/sup&gt; is a comprehensive collection of medical terms which helps consistent data exchange between systems. It can also cross-map to other standards like ICD-10, LOINC, etc.&lt;/p&gt;
&lt;p&gt;Since SNOMED CT is a huge dataset, it takes a lot of effort to import the entire dataset into Frappe Health. It also provides REST API to query SNOMED terms. Also, if your healthcare organization is focusing on only a specific domain, it doesn’t make sense to import the entire dataset.&lt;/p&gt;
&lt;p&gt;In such scenarios, it is better to map only the required diagnosis, symptoms, and other clinical objects.&lt;/p&gt;
&lt;p&gt;Frappe Health has a Diagnosis doctype where practitioners can enter diagnosis. We can add an additional field called &lt;code&gt;Snomed Code&lt;/code&gt; to link diagnosis to relevant SNOMED code.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://avilpage.com/images/snomed-frappe-health2.png"&gt;&lt;/p&gt;
&lt;p&gt;Frappe framework provides server script&lt;sup id="fnref:ss"&gt;&lt;a class="footnote-ref" href="http://avilpage.com/2022/08/frappe-health-snomed-ct.html#fn:ss"&gt;5&lt;/a&gt;&lt;/sup&gt; to dynamically run python script on any document event. We can write a simple python script to fetch relevant SNOMED code using SNOMED REST API. This script can be executed whenever the clinical object gets modified.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://avilpage.com/images/snomed-frappe-health3.png"&gt;&lt;/p&gt;
&lt;p&gt;Here is a simple python server script that adds relevant snomed codes to diagnosis.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;diagnosis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;diagnosis&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"https://browser.ihtsdotools.org/snowstorm/snomed-ct/browser/MAIN/descriptions?&amp;amp;limit=50&amp;amp;term="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;diagnosis&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&amp;amp;conceptActive=true&amp;amp;lang=english&amp;amp;skipTo=0&amp;amp;returnLimit=100"&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frappe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_get_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'items'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'concept'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'items'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'concept'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'fsn'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'term'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;mc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frappe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_doc&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s1"&gt;'doctype'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Medical Code'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'medical_code_standard'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'SNOMED'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;medical_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;medical_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After saving this script, if we go ahead and create or modify any diagnosis, it will automatically add relevant Snomed code to the diagnosis as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://avilpage.com/images/snomed-frappe-health4.png"&gt;&lt;/p&gt;
&lt;p&gt;The server script makes sure all the diagnosis objects are codified automatically without any manual effort.&lt;/p&gt;
&lt;p&gt;Since Frappe Framework &amp;amp; Frappe Health are low code, extremely customizable, we are able to integrate it with SNOMED in just a few minutes. Similarly, we can codify other clinical objects like Symptoms, Procedures, Medications, etc.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:FH"&gt;
&lt;p&gt;&lt;a href="https://github.com/frappe/health"&gt;https://github.com/frappe/health&lt;/a&gt; &lt;a class="footnote-backref" href="http://avilpage.com/2022/08/frappe-health-snomed-ct.html#fnref:FH" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:ff"&gt;
&lt;p&gt;&lt;a href="https://frappeframework.com"&gt;https://frappeframework.com&lt;/a&gt; &lt;a class="footnote-backref" href="http://avilpage.com/2022/08/frappe-health-snomed-ct.html#fnref:ff" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:mcs"&gt;
&lt;p&gt;&lt;a href="https://frappehealth.com/docs/v13/user/manual/en/healthcare/medical_code_standard"&gt;https://frappehealth.com/docs/v13/user/manual/en/healthcare/medical_code_standard&lt;/a&gt; &lt;a class="footnote-backref" href="http://avilpage.com/2022/08/frappe-health-snomed-ct.html#fnref:mcs" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:snomed"&gt;
&lt;p&gt;&lt;a href="https://www.nlm.nih.gov/healthit/snomedct/index.html"&gt;https://www.nlm.nih.gov/healthit/snomedct/index.html&lt;/a&gt; &lt;a class="footnote-backref" href="http://avilpage.com/2022/08/frappe-health-snomed-ct.html#fnref:snomed" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:ss"&gt;
&lt;p&gt;&lt;a href="https://frappeframework.com/docs/user/en/desk/scripting/server-script"&gt;https://frappeframework.com/docs/user/en/desk/scripting/server-script&lt;/a&gt; &lt;a class="footnote-backref" href="http://avilpage.com/2022/08/frappe-health-snomed-ct.html#fnref:ss" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>frappe-framework</category><category>HealthIT</category><guid>http://avilpage.com/2022/08/frappe-health-snomed-ct.html</guid><pubDate>Wed, 31 Aug 2022 10:59:13 GMT</pubDate></item><item><title>Mastering DICOM - #3 Setup Modality Worklist SCP</title><link>http://avilpage.com/2022/07/dicom-modality-worklist-scp.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;In the earlier article, we have learnt how to setup DICOM for digging deeper into DICOM protocol. In this article, let us learn how to setup a modality worklist(WML) SCP. Modalities can send C-FIND queries to this SCP and retrieve worklist information&lt;/p&gt;
&lt;h4&gt;Using Orthanc Worklist Plugin&lt;/h4&gt;
&lt;p&gt;Orthanc server has worklist plugin&lt;sup id="fnref:owp"&gt;&lt;a class="footnote-ref" href="http://avilpage.com/2022/07/dicom-modality-worklist-scp.html#fn:owp"&gt;1&lt;/a&gt;&lt;/sup&gt; which will serve worklist files that are stored in a particular directory. Let us download sample worklist files from Orthanc repository and keep in "WorklistDatabase" directory.&lt;/p&gt;
&lt;p&gt;Generate default configuration by running the following command.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$ ./Orthanc --config&lt;span class="o"&gt;=&lt;/span&gt;config.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the orthanc configuration file, enable worklist plugin, specify the worklist database directory so that Orthanc can locate relevant worklist files, add required modalities and restart the server.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;  "Plugins" : [
    "libModalityWorklists.dylib"
  ],

  "Worklists" : {
    "Enable": true,
    "Database": "./WorklistsDatabase",
    "FilterIssuerAet": false,
    "LimitAnswers": 0
  },

  "DicomModalities" : {
      "PYNETDICOM" : ["PYNETDICOM", "127.0.0.1", 4243],
      "FINDSCU" : ["FINDSCU", "127.0.0.1", 4244]
  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the plugin is enabled, we can use findscu to send C-FIND query.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$ findscu -W -k &lt;span class="s2"&gt;"ScheduledProcedureStepSequence"&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="m"&gt;4242&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will retrieve all worklist files from the server.&lt;/p&gt;
&lt;h4&gt;Using wlmscpfs&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;dcmtk&lt;/code&gt; &lt;sup id="fnref:dcmtk"&gt;&lt;a class="footnote-ref" href="http://avilpage.com/2022/07/dicom-modality-worklist-scp.html#fn:dcmtk"&gt;2&lt;/a&gt;&lt;/sup&gt; is a collection of utilities for DICOM standard. It has &lt;code&gt;wlmscpfs&lt;/code&gt; application which implements basic Service Class Provider(SCP). We can start the service by running the following command.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;wlmscpfs --debug --data-files-path WorklistsDatabase 4242
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the service is started modalities can send C-FIND query to this service.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;We have seen how to setup MWL SCP using Orthanc &amp;amp; wmlscpfs. Now that we have PACS &amp;amp; WML SCP up and running, in the next article lets see how to dig deeper in to the dicom standard.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:owp"&gt;
&lt;p&gt;&lt;a href="https://book.orthanc-server.com/plugins/worklists-plugin.html"&gt;https://book.orthanc-server.com/plugins/worklists-plugin.html&lt;/a&gt; &lt;a class="footnote-backref" href="http://avilpage.com/2022/07/dicom-modality-worklist-scp.html#fnref:owp" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:dcmtk"&gt;
&lt;p&gt;&lt;a href="https://github.com/DCMTK/dcmtk"&gt;https://github.com/DCMTK/dcmtk&lt;/a&gt; &lt;a class="footnote-backref" href="http://avilpage.com/2022/07/dicom-modality-worklist-scp.html#fnref:dcmtk" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>dicom</category><guid>http://avilpage.com/2022/07/dicom-modality-worklist-scp.html</guid><pubDate>Sun, 31 Jul 2022 12:49:29 GMT</pubDate></item><item><title>Using Frappe Framework As REST API Generator</title><link>http://avilpage.com/2022/04/frappe-framework-rest-api-generator.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;When a company plans to build a mobile application and/or a web application, they need to create REST APIs to store data. This is a common requirement for CRUD applications.&lt;/p&gt;
&lt;p&gt;In the Python ecosystem, there are several projects like Django Rest Framework, Flask-RESTful, FastApi which does the heavy lifting of implementing REST APIs. In other ecosystems, there are similar projects/frameworks for this job.&lt;/p&gt;
&lt;h4&gt;REST API Generators&lt;/h4&gt;
&lt;p&gt;By using the above mentioned frameworks, developers can build REST APIs at a faster rate. Still, developers have to develop and maintain code for these APIs.&lt;/p&gt;
&lt;p&gt;To avoid even this work, there are REST API generators like postgrest&lt;sup id="fnref:postgrest"&gt;&lt;a class="footnote-ref" href="http://avilpage.com/2022/04/frappe-framework-rest-api-generator.html#fn:postgrest"&gt;1&lt;/a&gt;&lt;/sup&gt;, prest which can instantly generate REST APIs by inspecting database schema. With these, developers just have to design the DB schema and these tools take care of generating APIs without writing a single line of code.&lt;/p&gt;
&lt;p&gt;In this post, let us see how Frappe framework can be used as a REST API generator and what are the advantages of using Frappe.&lt;/p&gt;
&lt;h4&gt;Frappe Framework&lt;/h4&gt;
&lt;p&gt;Frappe framework is meta data driven low code, web framework written in Python and Javascript.&lt;/p&gt;
&lt;h5&gt;Web UI&lt;/h5&gt;
&lt;p&gt;Frappe framework provides web UI to create models(called doctypes in Frappe) and it provides REST API&lt;sup id="fnref:rest_api"&gt;&lt;a class="footnote-ref" href="http://avilpage.com/2022/04/frappe-framework-rest-api-generator.html#fn:rest_api"&gt;2&lt;/a&gt;&lt;/sup&gt; for all the models out of the box.&lt;/p&gt;
&lt;p&gt;There is no need to write manual SQL queries to manage schema. With some training even non-developers can even manage models in Frappe.&lt;/p&gt;
&lt;h5&gt;Roles &amp;amp; Permissions&lt;/h5&gt;
&lt;p&gt;With traditional API generators, managing roles &amp;amp; permissions involves additional development and maintenance costs. Frappes comes with an authentication system and it has support for role based permissions out of the box. From the web UI, users can manage roles &amp;amp; permissions.&lt;/p&gt;
&lt;h5&gt;Hooks&lt;/h5&gt;
&lt;p&gt;Even though REST API generators give API out of the box, there will be scenarios where custom business logic needs to be hooked in for various events.
In such scenarios, developers end up using an alternate framework/tool to manage hooks and business logic.&lt;/p&gt;
&lt;p&gt;Frappe provides server scripts by which arbitrary python code can be executed dynamically based on model events. There is no need to set up another framework for these things.&lt;/p&gt;
&lt;h5&gt;Utilities&lt;/h5&gt;
&lt;p&gt;Frappe framework comes with a lot of utilities like Job Queues, Schedulers, Admin interface, socket.io etc. As the project grows and the need evolves, Frappe has all the common utilities that are required for a web application development.&lt;/p&gt;
&lt;h5&gt;Conclusion&lt;/h5&gt;
&lt;p&gt;When a company wants to build a solution to a problem, it should focus most of the time in solving that problem instead of wasting their time on building CRUD interfaces or REST APIs.&lt;/p&gt;
&lt;p&gt;Frappe framework was designed to rapidly build web applications with low code. If you need a REST API generator and some additional functionality for the REST APIs, Frappe framework fits the bill and reduces a lot of development time.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:postgrest"&gt;
&lt;p&gt;&lt;a href="https://github.com/PostgREST/postgrest"&gt;https://github.com/PostgREST/postgrest&lt;/a&gt; &lt;a class="footnote-backref" href="http://avilpage.com/2022/04/frappe-framework-rest-api-generator.html#fnref:postgrest" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:rest_api"&gt;
&lt;p&gt;&lt;a href="https://frappeframework.com/docs/user/en/api/rest"&gt;https://frappeframework.com/docs/user/en/api/rest&lt;/a&gt; &lt;a class="footnote-backref" href="http://avilpage.com/2022/04/frappe-framework-rest-api-generator.html#fnref:rest_api" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>frappe-framework</category><guid>http://avilpage.com/2022/04/frappe-framework-rest-api-generator.html</guid><pubDate>Sat, 30 Apr 2022 13:31:53 GMT</pubDate></item></channel></rss>