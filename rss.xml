<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avil Page</title><link>http://www.avilpage.com</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://www.avilpage.com/rss.xml"></atom:link><language>en</language><lastBuildDate>Tue, 07 Feb 2017 13:25:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How BMTC Is Exploiting Crores From Bangalore Citizens?</title><link>http://www.avilpage.com/2017/02/bmtc-exploiting-crores-from-bangalore-citizens.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://mybmtc.com" target="_blank"&gt;BMTC&lt;/a&gt; (Bengaluru Metropolitan Transport Corporation) is a government agency which operates the public transport bus service in Bangalore, India. It holds monopoly as it is the only choice for public transportation.&lt;/p&gt;
&lt;h3&gt;Fare Calculation&lt;/h3&gt;
&lt;p&gt;BMTC considers ~2KM distance as a stage and the &lt;a href="https://www.mybmtc.com/general-service?fareid=gns&amp;amp;qt-home_quick_tab_bottom=2" target="_blank"&gt;fares for each stage&lt;/a&gt; are as follows.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/bmtc-fare-charges.png" width="600px"&gt;
&lt;/p&gt;

&lt;p&gt;Let's say, you want to travel from Indira Nagar to BTM Layout, it will cover 5 stages. So, BMTC charges 19₹ for that.&lt;/p&gt;
&lt;h3&gt;Exploitation?&lt;/h3&gt;
&lt;p&gt;If you travel from Indira Nagar KFC signal to Doopanahalli Arch(1.2KM), which comes under 1 stage, you have to pay 5₹.  On the other hand, if you travel Indira Nagar KFC signal to Doopanahalli bustop(1.4KM), you have to pay 12₹.&lt;/p&gt;
&lt;p&gt;How can BMTC charge 5₹ for the first 1.2KM and 7₹ for the subsequent 0.2KM?  If BMTC charges, 5₹ for 1st stage. Then it should charge 5₹ + extra for next stage. But it shouldn't be more than 10₹.&lt;/p&gt;
&lt;p&gt;You can just take 1 ticket(5₹) for 1st stage(1.2KM) and one more ticket(5₹)  for the next stage(0.2KM).  You can just travel 2 stages with 2 tickets for 10₹.&lt;/p&gt;
&lt;p&gt;Turnsout BMTC is charging 3₹ extra on every ticket which covers atleast 2 stages.  As lakhs of people travel in BMTC buses daily, in a month, this 3₹ turns into crores of rupees.&lt;/p&gt;
&lt;p&gt;I am not sure when BMTC has started charging like this. A month back, I sent them an email asking for an explaination of unfair bus tickets and they haven't replied yet.&lt;/p&gt;&lt;/div&gt;</description><category>bangalore</category><guid>http://www.avilpage.com/2017/02/bmtc-exploiting-crores-from-bangalore-citizens.html</guid><pubDate>Sun, 05 Feb 2017 17:08:16 GMT</pubDate></item><item><title>Refactoring Django With FST</title><link>http://www.avilpage.com/2017/01/refactoring-django-with-fst.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;Django developers decided to &lt;a href="https://code.djangoproject.com/ticket/23919" target="_blank"&gt;drop Python 2 compatability&lt;/a&gt; in Django 2.0. There are serveral things that should be refactored/removed.&lt;/p&gt;
&lt;p&gt;For example, in Python 2, programmers has to explicitly specify the class &amp;amp; instance when invoking &lt;code&gt;super&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;In Python 3, &lt;code&gt;super&lt;/code&gt; can be invoked without arguments and it will choose right class &amp;amp; instance automatically.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;For this refactoring, a simple &lt;code&gt;sed&lt;/code&gt; search/replace should suffice. But, there are several hacks in codebase where super calls the grandparent instead of the parent. So, &lt;code&gt;sed&lt;/code&gt; won't work in such cases. Also it is very hard to refactor them manually and much harder for reviewers to review it as there are 1364 super calls in code base.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;→ grep -rI &lt;span class="s2"&gt;"super("&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l
   1364
&lt;/pre&gt;


&lt;p&gt;Changes has to be scripted. I wrote a &lt;a href="https://github.com/ChillarAnand/01/blob/master/python/super_exp.py" target="_blank"&gt;simple script&lt;/a&gt; to replace super calls by class names. This worked only for 50% of the cases. It failed to capture classes which had comments on top of them, classes with decorators and nested classes.&lt;/p&gt;
&lt;p&gt;To handle all these cases, a normal python script gets more complicated and there is no guarantee that it can handle all edge cases. So, I experimented with AST(Abstract Syntax Trees).&lt;/p&gt;
&lt;p&gt;Python has &lt;a href="https://docs.python.org/3/library/ast.html" target="_blank"&gt;ast module&lt;/a&gt; to convert code to AST but it can't convert AST back to code. There are 3rd party packages like &lt;a href="https://pypi.python.org/pypi/astor" target="_blank"&gt;astor&lt;/a&gt; which can do this.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# this is a comment&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"hello world"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Converting above code to AST and then converting back gives this&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello world'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Code to AST is a lossy transformation as they cannot preserve empty lines, comments and code formatting.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ast_to_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code_to_ast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_code&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;source_code&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;For lossless transformation, FST(Full Syntax Trees) packages like &lt;a href="https://github.com/PyCQA/baron" target="_blank"&gt;Baron&lt;/a&gt; or &lt;a href="https://github.com/PyCQA/redbaron" target="_blank"&gt;RedBaron&lt;/a&gt; should be used.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fst_to_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code_to_fst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_code&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;source_code&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;With RedBaron FST, just locate super calls, find nearest class node, check class name with super and replace accordingly. It took &lt;a href="https://github.com/ChillarAnand/01/blob/master/python/redbaron_super.py" target="_blank"&gt;less than 10 lines&lt;/a&gt; of code.&lt;/p&gt;
&lt;p&gt;RedBaron has good documentation with relveant examples and its API is similar to BeautifulSoup. Next time when writing code that modifies code consider using RedBaron.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/timgraham" target="_blank"&gt;Tim Graham&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/aaugustin" target="_blank"&gt;Aymeric Augustin&lt;/a&gt; for &lt;a href="https://github.com/django/django/pull/7905/commits/d6eaf7c0183cd04b78f2a55e1d60bb7e59598310" target="_blank"&gt;reviewing the patch&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>django</category><category>python</category><guid>http://www.avilpage.com/2017/01/refactoring-django-with-fst.html</guid><pubDate>Sun, 29 Jan 2017 17:51:37 GMT</pubDate></item><item><title>Why Blog Posts Are Better Than Scientific Papers?</title><link>http://www.avilpage.com/2017/01/blog_posts_are_better_than_scientific_papers/</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;Titus Brown wrote a blog post on why &lt;a href="http://ivory.idyll.org/blog/2017-top-ten-reasons-blog-posts.html"&gt;blog posts are better than scientific papers&lt;/a&gt;. Here are few more reasons for that.&lt;/p&gt;
&lt;h3&gt;Fast&lt;/h3&gt;
&lt;p&gt;Publishing blog posts is lightning fast(how fast can you type?). You can just publish it with a click after writing. However with scientific papers you have to wait months to get your work published.&lt;/p&gt;
&lt;h3&gt;Mutability&lt;/h3&gt;
&lt;p&gt;Blog posts are easy to edit. If you are using a version controlled system like git, any one can easily collaborate. You can also leave comments on (most) blog posts and can have discussion with the author and/or others. Scientific papers once published are hard to change.&lt;/p&gt;
&lt;h3&gt;No Gatekeepers&lt;/h3&gt;
&lt;p&gt;To publish blog posts, you can setup your own blog or use services like &lt;a href="http://medium.com"&gt;medium&lt;/a&gt;. There are no gatekeepers who says that you can't publish a blog post because they thinks its not worth it.&lt;/p&gt;
&lt;h3&gt;Organic&lt;/h3&gt;
&lt;p&gt;Blog posts tend to be casual and organic. You can crack a joke and readers will enjoy it. Scientific papers are formal. You spray some sarcasm and your paper never gets published.&lt;/p&gt;&lt;/div&gt;</description><category>blogging</category><category>research</category><guid>http://www.avilpage.com/2017/01/blog_posts_are_better_than_scientific_papers/</guid><pubDate>Sun, 08 Jan 2017 17:03:38 GMT</pubDate></item><item><title>What Is The Meaning Of Life?</title><link>http://www.avilpage.com/2016/12/</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;The meaning of life is&lt;/p&gt;
&lt;blockquote cite="https://en.oxforddictionaries.com/definition/life"&gt;

the condition that distinguishes animals and plants from inorganic matter, including the capacity for growth, reproduction, functional activity, and continual change preceding death.

&lt;/blockquote&gt;

&lt;p&gt;Source: Oxford Dictionary&lt;/p&gt;&lt;/div&gt;</description><category>life</category><guid>http://www.avilpage.com/2016/12/</guid><pubDate>Sun, 25 Dec 2016 18:29:23 GMT</pubDate></item><item><title>Detect &amp; Correct Skew In Images Using Python</title><link>http://www.avilpage.com/2016/11/detect-correct-skew-images-python.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;When scanning a document, a slight skew gets into the scanned image. If you are using the scanned image to extract information from it, detecting and correcting skew is crucial.&lt;/p&gt;
&lt;p&gt;There are several techniques that are used to skew correction.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projection profile method&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hough transform&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topline method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scanline method&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, projection profile method is the simplest and easiest way to determine skew in documents in the range ±5°. Lets take a part of scanned image and see how to correct skew.&lt;/p&gt;
&lt;p&gt;In this method, we will convert image to black (absence of pixel) &amp;amp; white (presence of pixel). Now image is projected vertically to get a histogram of pixels. Now image is rotated at various angles and above process is repeated. Wherver we find maximum diffrence between peaks, that will be the best angle.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.ndimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;interpolation&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt;

&lt;span class="n"&gt;input_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# convert to binary&lt;/span&gt;
&lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ht&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
&lt;span class="n"&gt;pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bin_img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ht&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;255.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin_img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'gray'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'binary.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;


&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;angles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;angles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin_img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;best_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;best_angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;angles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_score&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Best angle: {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_angle&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# correct skew&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin_img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best_angle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromarray&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"uint8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RGB"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'skew_corrected.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/original.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Original Image&lt;/p&gt;

&lt;hr&gt;

&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/gray.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Black &amp;amp; white image&lt;/p&gt;

&lt;hr&gt;

&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/hist_0.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Histogram of image&lt;/p&gt;

&lt;hr&gt;

&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/hist_scores.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Scores at various angles&lt;/p&gt;

&lt;hr&gt;

&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/hist_best.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Histogram at 2° (best angle)&lt;/p&gt;

&lt;hr&gt;

&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/skew_corrected.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Skew corrected image&lt;/p&gt;

&lt;p&gt;Here we have done only one iteration to find best angle. To get better accuracy, we can search over at (2 ± 0.5)°. This process can be repeated until we find a suitable level of accuracy.&lt;/p&gt;&lt;/div&gt;</description><category>image processing</category><category>ocr</category><category>skew</category><guid>http://www.avilpage.com/2016/11/detect-correct-skew-images-python.html</guid><pubDate>Sat, 12 Nov 2016 12:11:17 GMT</pubDate></item><item><title>Why I Use CyanogenMod?</title><link>http://www.avilpage.com/2016/10/why-use-cyanogenmod.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;When listening to music, to switch tracks I want to use volume buttons. For this I have to use &lt;a href="https://play.google.com/store/apps/details?id=com.silentlexx.volbtntrackctrl&amp;amp;hl=en"&gt;Pocket Skip Track&lt;/a&gt; app.
CyanogenMod has inbuilt support for that.&lt;/p&gt;
&lt;p&gt;To interact with mobile from computer over wifi, &lt;a href="https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb"&gt;wifi adb&lt;/a&gt; is required. CyanogenMod provides an option to enable this in &lt;code&gt;Developer Options&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To put mobile in recovery mode, &lt;a href="http://repo.xposed.info/module/com.ceco.kitkat.gravitybox"&gt;Gravity Box&lt;/a&gt; is required. This should be used only after installing Xposed framework. CyanogenMod has &lt;code&gt;Advanced reboot&lt;/code&gt; which provides option to put phone in recovery mode.&lt;/p&gt;
&lt;p&gt;Battery icon in status bar is very small. Having a text percentage indicator will be more useful. For this &lt;a href="https://play.google.com/store/apps/details?id=de.kroegerama.android4batpercent"&gt;battery percentage&lt;/a&gt; is required.
CyanogenMod has inbuilt circle/text indicators.&lt;/p&gt;
&lt;p&gt;Auto brighness stopped working after I have rooted Moto G4 plus. I had to use &lt;a href="https://play.google.com/store/apps/details?id=com.urbandroid.lux"&gt;twilight&lt;/a&gt; for auto brighness adjustment. With CyanogenMod, it is working fine. It also has a night mode option.&lt;/p&gt;
&lt;p&gt;With stock android, auto rotate won't work in all directions. &lt;a href="https://play.google.com/store/apps/details?id=com.googlecode.eyesfree.setorientation"&gt;Set orientation&lt;/a&gt; app is required for that. CyanogenMod has inbuilt support for that.&lt;/p&gt;
&lt;p&gt;To adapt mobile display to the time of the day, flux app is required on stock android. CyanogenMod has inbuilt option for this.&lt;/p&gt;
&lt;p&gt;To get superuser permissions, I have to root stock android. CyanogenMod comes with root permissions. To run &lt;code&gt;adb&lt;/code&gt; as root on stock android, &lt;code&gt;adbd insecure&lt;/code&gt; app is required. CyanogenMod works without it.&lt;/p&gt;
&lt;p&gt;Stock android also doesn't provide any options to customize status bar. CyanogenMod has several options to customize it.&lt;/p&gt;
&lt;p&gt;There are several other things where CyanogenMod excels when compared to stock android like themes, privacy guard e.t.c. However, CyanogenMod comes with a lot of inbuilt features(batteries included) and that is the main reason for me to use it.&lt;/p&gt;&lt;/div&gt;</description><category>customization</category><category>cyanogenmod</category><category>xposed</category><guid>http://www.avilpage.com/2016/10/why-use-cyanogenmod.html</guid><pubDate>Mon, 31 Oct 2016 14:05:09 GMT</pubDate></item><item><title>Remove Clock From LockScreen/StatusBar On Android</title><link>http://www.avilpage.com/2016/09/remove-clock-lock-screen-status-bar-android.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;I have been living without time from a few years and it is a bliss. I have removed time from my laptop. For android mobile, I couldn't find a reliable way to remove time and I used to change timezone to a random zone. Recently &lt;a href="https://github.com/viren-nadkarni"&gt;Viren&lt;/a&gt; showed me Xposed framework and some xposed modules which will help to remove clock from lock screen and status bar.&lt;/p&gt;
&lt;p&gt;Before proceeding, make sure your phone is &lt;a href="http://www.xda-developers.com/root/"&gt;rooted&lt;/a&gt; and &lt;a href="http://repo.xposed.info/module/de.robv.android.xposed.installer"&gt;Xposed framework&lt;/a&gt; is installed.&lt;/p&gt;
&lt;h4&gt;Remove Clock From LockScreen&lt;/h4&gt;
&lt;p&gt;To remove clock from lockscreen, download &lt;a href="http://repo.xposed.info/module/com.ssrdroide.lockscreenwidgets"&gt;Lock screen widgets&lt;/a&gt; module and activate it.&lt;/p&gt;
&lt;p&gt;If you open it, it has an option to hide date and time.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_0.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;h4&gt;Remove Time From StatusBar&lt;/h4&gt;
&lt;p&gt;To remove clock from status bar, you have to install &lt;a href="http://repo.xposed.info/module/com.ceco.marshmallow.gravitybox"&gt;GravityBox&lt;/a&gt;. Open GravityBox and goto statusbar settings&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_3.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_4.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_5.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;p&gt;If you are already using CyanogenMod, there is an option to hide time in settings.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_1.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_2.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;p&gt;Once you do this, you will have a neat lockscreen without any time on it.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_6.png" height="400px" width="220"&gt;
&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.avilpage.com/2016/09/remove-clock-lock-screen-status-bar-android.html</guid><pubDate>Thu, 15 Sep 2016 13:24:38 GMT</pubDate></item><item><title>Detecting USB Events In Ubuntu With Python</title><link>http://www.avilpage.com/2016/09/detecting-device-events-in-ubuntu-with-python.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Udev"&gt;udev&lt;/a&gt; is responsible for managing devices on Linux. It provides &lt;code&gt;udevadm&lt;/code&gt;, a CLI utility to monitor and control devices.&lt;/p&gt;
&lt;p&gt;If we run &lt;code&gt;udevadm monitor&lt;/code&gt; on terminal and connect a USB drive or hard disk or a mobile via USB to your computer, it will show that kernel has detected the device and it will send a signal to udev about it.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;→ udevadm monitor
monitor will print the received events &lt;span class="k"&gt;for&lt;/span&gt;:
UDEV - the event which udev sends out after rule processing
KERNEL - the kernel uevent

KERNEL&lt;span class="o"&gt;[&lt;/span&gt;4336.899091&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
KERNEL&lt;span class="o"&gt;[&lt;/span&gt;4336.899774&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2/1-2:1.0 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
KERNEL&lt;span class="o"&gt;[&lt;/span&gt;4336.902553&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2/1-2:1.1 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
UDEV  &lt;span class="o"&gt;[&lt;/span&gt;4336.911201&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
UDEV  &lt;span class="o"&gt;[&lt;/span&gt;4336.936453&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2/1-2:1.1 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
UDEV  &lt;span class="o"&gt;[&lt;/span&gt;4337.947174&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2/1-2:1.0 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/pyudev"&gt;Pyudev&lt;/a&gt;, a third party package provides python bindings for udev. It can be installed with &lt;code&gt;pip install pyudev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With this we can create a simple monitor to detect USB events.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyudev&lt;/span&gt;

&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyudev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;monitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyudev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Monitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_netlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subsystem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'usb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'add'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{} connected'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Save this to a file say monitor.py and run it with &lt;code&gt;python monitor.py&lt;/code&gt; and connect a mobile or pendrive and it will show something like this.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Device&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/sys/devices/pci0000:00/0000:00:14.0/usb1/1-6/1-6:1.0'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; connected
Device&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/sys/devices/pci0000:00/0000:00:14.0/usb1/1-1/1-1:1.0'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; connected
&lt;/pre&gt;


&lt;p&gt;Here we are just detecting &lt;code&gt;add&lt;/code&gt; event. Similary we can detect other events like &lt;code&gt;delete&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is useful for automatically running shell scripts once the device gets plugged or unplugged.&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.avilpage.com/2016/09/detecting-device-events-in-ubuntu-with-python.html</guid><pubDate>Fri, 02 Sep 2016 13:24:38 GMT</pubDate></item><item><title>Migrate From Blogger To Static Site (Nikola)</title><link>http://www.avilpage.com/2016/08/migrate-from-blogger-to-static-site-nikola.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;Long back I have started this blog on &lt;a href="https://blogger.com"&gt;blogger&lt;/a&gt; platform. Now I choose to migrate to a static because of limitations of blogger.&lt;/p&gt;
&lt;p&gt;Blogger has a simple editor in browser to write posts in html. With static site, you can write post in your editor in markdown and keep them in version control system like git.&lt;/p&gt;
&lt;p&gt;Jekyll, Pelican, Lektor were my initial choices for static site generators. Unfortunately, they didn't had any useful plugins for smooth migration of data from blogger. Then I stumbled across &lt;a href="https://plugins.getnikola.com/#import_blogger"&gt;import_blogger&lt;/a&gt; plugin of &lt;a href="https://getnikola.com"&gt;Nikola&lt;/a&gt; and it is able to migrate text content, images without any issues. So, I decided to use Nikola.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://getnikola.com"&gt;Nikola&lt;/a&gt; has great documentation and setup was simpler. I used &lt;code&gt;import_blogger&lt;/code&gt; plugin and imported all the data. All the posts and pages were working well with exact same urls.&lt;/p&gt;
&lt;p&gt;Blogger tags all posts of particular label under &lt;code&gt;/search/label/foo&lt;/code&gt;. I have used these urls in some posts. Nikola shows posts under &lt;code&gt;/categories/foo.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is where nikola &lt;code&gt;REDIRECTIONS&lt;/code&gt; come in handy. Using this, a list of from &amp;amp; to urls can be mapped. I wrote a simple function for redirections and then enabled &lt;code&gt;STRIP_INDEXES&lt;/code&gt; which removes trailing &lt;code&gt;.html&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'emacs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'django'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'chrome'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;LABEL_REDIRECTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;LABEL_REDIRECTIONS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;
        &lt;span class="s1"&gt;'/search/label/{}/index.html'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;'/categories/{}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Since I stripped &lt;code&gt;.html&lt;/code&gt; from urls, old urls broke. So I generated a list of old urls and wrote another function to redirect them to new urls.&lt;/p&gt;
&lt;p&gt;Nikola has few builtin themes. I wanted something minimalistic and so I rolled out custom theme which you are seeing right now.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/punchagan"&gt;Puneeth Chaganti&lt;/a&gt;, &lt;a href="https://github.com/Kwpolska"&gt;Chris Warrick&lt;/a&gt;, &lt;a href="https://github.com/ralsina"&gt;Roberto Alsina&lt;/a&gt; for helping me with migration.&lt;/p&gt;&lt;/div&gt;</description><category>blogger</category><category>nikola</category><guid>http://www.avilpage.com/2016/08/migrate-from-blogger-to-static-site-nikola.html</guid><pubDate>Sun, 07 Aug 2016 11:32:15 GMT</pubDate></item><item><title>emblem-mode for Emacs!</title><link>http://www.avilpage.com/2016/07/emblem-mode-for-emacs.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;Emblem.js is a ember friendly templating engine used as an alternative for handlebars.js.&lt;/p&gt;
&lt;p&gt;Emblem.js doesn't have any official plugins for emacs. However they recommend to use slim plugins as they are similar.&lt;/p&gt;
&lt;p&gt;You get slim-mode from melpa. Install with&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;M-x install-package slim-mode
&lt;/pre&gt;


&lt;p&gt;Now we have to activate slim-mode for emblem files which will be ending with &lt;code&gt;.em&lt;/code&gt; or &lt;code&gt;.emblem&lt;/code&gt;. We can use &lt;code&gt;auto-mode-alist&lt;/code&gt; to set major modes that needs to activated for files with specific extension.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'auto-mode-alist&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\.\\(em\\|emblem\\)\\'"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;slim-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We can add this to emacs configuration which automatically activates slim mode for emblem.js files.&lt;/p&gt;&lt;/div&gt;</description><category>emblem</category><category>slim-mode</category><guid>http://www.avilpage.com/2016/07/emblem-mode-for-emacs.html</guid><pubDate>Mon, 25 Jul 2016 17:32:35 GMT</pubDate></item></channel></rss>