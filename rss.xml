<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avil Page</title><link>http://www.avilpage.com</link><description></description><atom:link rel="self" href="http://www.avilpage.com/rss.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 25 Dec 2016 18:36:31 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>What Is The Meaning Of Life?</title><link>http://www.avilpage.com/2016/12/what-is-the-meaning-of-life.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;As per oxford dictionary, the meaning of life is&lt;/p&gt;
&lt;blockquote cite="https://en.oxforddictionaries.com/definition/life"&gt;

the condition that distinguishes animals and plants from inorganic matter, including the capacity for growth, reproduction, functional activity, and continual change preceding death.

&lt;/blockquote&gt;&lt;/div&gt;</description><category>life</category><guid>http://www.avilpage.com/2016/12/what-is-the-meaning-of-life.html</guid><pubDate>Sun, 25 Dec 2016 18:29:23 GMT</pubDate></item><item><title>Detect &amp; Correct Skew In Images Using Python</title><link>http://www.avilpage.com/2016/11/detect-correct-skew-images-python.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;When scanning a document, a slight skew gets into the scanned image. If you are using the scanned image to extract information from it, detecting and correcting skew is crucial.&lt;/p&gt;
&lt;p&gt;There are several techniques that are used to skew correction.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projection profile method&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hough transform&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topline method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scanline method&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, projection profile method is the simplest and easiest way to determine skew in documents in the range Â±5Â°. Lets take a part of scanned image and see how to correct skew.&lt;/p&gt;
&lt;p&gt;In this method, we will convert image to black (absence of pixel) &amp;amp; white (presence of pixel). Now image is projected vertically to get a histogram of pixels. Now image is rotated at various angles and above process is repeated. Wherver we find maximum diffrence between peaks, that will be the best angle.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.ndimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;interpolation&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt;

&lt;span class="n"&gt;input_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# convert to binary&lt;/span&gt;
&lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ht&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
&lt;span class="n"&gt;pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bin_img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ht&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;255.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin_img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'gray'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'binary.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;


&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;angles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;angles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin_img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;best_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;best_angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;angles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_score&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Best angle: {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_angle&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# correct skew&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bin_img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best_angle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromarray&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"uint8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RGB"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'skew_corrected.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/original.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Original Image&lt;/p&gt;

&lt;hr&gt;

&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/gray.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Black &amp;amp; white image&lt;/p&gt;

&lt;hr&gt;

&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/hist_0.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Histogram of image&lt;/p&gt;

&lt;hr&gt;

&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/hist_scores.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Scores at various angles&lt;/p&gt;

&lt;hr&gt;

&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/hist_best.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Histogram at 2Â° (best angle)&lt;/p&gt;

&lt;hr&gt;

&lt;p align="center"&gt;&lt;img align="center" src="http://www.avilpage.com/skew_python/skew_corrected.png"&gt;&lt;/p&gt;

&lt;p align="center"&gt;Skew corrected image&lt;/p&gt;

&lt;p&gt;Here we have done only one iteration to find best angle. To get better accuracy, we can search over at (2 Â± 0.5)Â°. This process can be repeated until we find a suitable level of accuracy.&lt;/p&gt;&lt;/div&gt;</description><category>image processing</category><category>ocr</category><category>skew</category><guid>http://www.avilpage.com/2016/11/detect-correct-skew-images-python.html</guid><pubDate>Sat, 12 Nov 2016 12:11:17 GMT</pubDate></item><item><title>Why I Use CyanogenMod?</title><link>http://www.avilpage.com/2016/10/why-use-cyanogenmod.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;When listening to music, to switch tracks I want to use volume buttons. For this I have to use &lt;a href="https://play.google.com/store/apps/details?id=com.silentlexx.volbtntrackctrl&amp;amp;hl=en"&gt;Pocket Skip Track&lt;/a&gt; app.
CyanogenMod has inbuilt support for that.&lt;/p&gt;
&lt;p&gt;To interact with mobile from computer over wifi, &lt;a href="https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb"&gt;wifi adb&lt;/a&gt; is required. CyanogenMod provides an option to enable this in &lt;code&gt;Developer Options&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To put mobile in recovery mode, &lt;a href="http://repo.xposed.info/module/com.ceco.kitkat.gravitybox"&gt;Gravity Box&lt;/a&gt; is required. This should be used only after installing Xposed framework. CyanogenMod has &lt;code&gt;Advanced reboot&lt;/code&gt; which provides option to put phone in recovery mode.&lt;/p&gt;
&lt;p&gt;Battery icon in status bar is very small. Having a text percentage indicator will be more useful. For this &lt;a href="https://play.google.com/store/apps/details?id=de.kroegerama.android4batpercent"&gt;battery percentage&lt;/a&gt; is required.
CyanogenMod has inbuilt circle/text indicators.&lt;/p&gt;
&lt;p&gt;Auto brighness stopped working after I have rooted Moto G4 plus. I had to use &lt;a href="https://play.google.com/store/apps/details?id=com.urbandroid.lux"&gt;twilight&lt;/a&gt; for auto brighness adjustment. With CyanogenMod, it is working fine. It also has a night mode option.&lt;/p&gt;
&lt;p&gt;With stock android, auto rotate won't work in all directions. &lt;a href="https://play.google.com/store/apps/details?id=com.googlecode.eyesfree.setorientation"&gt;Set orientation&lt;/a&gt; app is required for that. CyanogenMod has inbuilt support for that.&lt;/p&gt;
&lt;p&gt;To adapt mobile display to the time of the day, flux app is required on stock android. CyanogenMod has inbuilt option for this.&lt;/p&gt;
&lt;p&gt;To get superuser permissions, I have to root stock android. CyanogenMod comes with root permissions. To run &lt;code&gt;adb&lt;/code&gt; as root on stock android, &lt;code&gt;adbd insecure&lt;/code&gt; app is required. CyanogenMod works without it.&lt;/p&gt;
&lt;p&gt;Stock android also doesn't provide any options to customize status bar. CyanogenMod has several options to customize it.&lt;/p&gt;
&lt;p&gt;There are several other things where CyanogenMod excels when compared to stock android like themes, privacy guard e.t.c. However, CyanogenMod comes with a lot of inbuilt features(batteries included) and that is the main reason for me to use it.&lt;/p&gt;&lt;/div&gt;</description><category>customization</category><category>cyanogenmod</category><category>xposed</category><guid>http://www.avilpage.com/2016/10/why-use-cyanogenmod.html</guid><pubDate>Mon, 31 Oct 2016 14:05:09 GMT</pubDate></item><item><title>Remove Clock From LockScreen/StatusBar On Android</title><link>http://www.avilpage.com/2016/09/remove-clock-lock-screen-status-bar-android.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;I have been living without time from a few years and it is a bliss. I have removed time from my laptop. For android mobile, I couldn't find a reliable way to remove time and I used to change timezone to a random zone. Recently &lt;a href="https://github.com/viren-nadkarni"&gt;Viren&lt;/a&gt; showed me Xposed framework and some xposed modules which will help to remove clock from lock screen and status bar.&lt;/p&gt;
&lt;p&gt;Before proceeding, make sure your phone is &lt;a href="http://www.xda-developers.com/root/"&gt;rooted&lt;/a&gt; and &lt;a href="http://repo.xposed.info/module/de.robv.android.xposed.installer"&gt;Xposed framework&lt;/a&gt; is installed.&lt;/p&gt;
&lt;h4&gt;Remove Clock From LockScreen&lt;/h4&gt;
&lt;p&gt;To remove clock from lockscreen, download &lt;a href="http://repo.xposed.info/module/com.ssrdroide.lockscreenwidgets"&gt;Lock screen widgets&lt;/a&gt; module and activate it.&lt;/p&gt;
&lt;p&gt;If you open it, it has an option to hide date and time.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_0.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;h4&gt;Remove Time From StatusBar&lt;/h4&gt;
&lt;p&gt;To remove clock from status bar, you have to install &lt;a href="http://repo.xposed.info/module/com.ceco.marshmallow.gravitybox"&gt;GravityBox&lt;/a&gt;. Open GravityBox and goto statusbar settings&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_3.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_4.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_5.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;p&gt;If you are already using CyanogenMod, there is an option to hide time in settings.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_1.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_2.png" height="400px" width="220"&gt;
&lt;/p&gt;

&lt;p&gt;Once you do this, you will have a neat lockscreen without any time on it.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;img src="http://www.avilpage.com/remove_clock_android/remove_clock_anrdoid_6.png" height="400px" width="220"&gt;
&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.avilpage.com/2016/09/remove-clock-lock-screen-status-bar-android.html</guid><pubDate>Thu, 15 Sep 2016 13:24:38 GMT</pubDate></item><item><title>Detecting USB Events In Ubuntu With Python</title><link>http://www.avilpage.com/2016/09/detecting-device-events-in-ubuntu-with-python.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Udev"&gt;udev&lt;/a&gt; is responsible for managing devices on Linux. It provides &lt;code&gt;udevadm&lt;/code&gt;, a CLI utility to monitor and control devices.&lt;/p&gt;
&lt;p&gt;If we run &lt;code&gt;udevadm monitor&lt;/code&gt; on terminal and connect a USB drive or hard disk or a mobile via USB to your computer, it will show that kernel has detected the device and it will send a signal to udev about it.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;â udevadm monitor
monitor will print the received events &lt;span class="k"&gt;for&lt;/span&gt;:
UDEV - the event which udev sends out after rule processing
KERNEL - the kernel uevent

KERNEL&lt;span class="o"&gt;[&lt;/span&gt;4336.899091&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
KERNEL&lt;span class="o"&gt;[&lt;/span&gt;4336.899774&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2/1-2:1.0 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
KERNEL&lt;span class="o"&gt;[&lt;/span&gt;4336.902553&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2/1-2:1.1 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
UDEV  &lt;span class="o"&gt;[&lt;/span&gt;4336.911201&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
UDEV  &lt;span class="o"&gt;[&lt;/span&gt;4336.936453&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2/1-2:1.1 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
UDEV  &lt;span class="o"&gt;[&lt;/span&gt;4337.947174&lt;span class="o"&gt;]&lt;/span&gt; add      /devices/pci0000:00/0000:00:14.0/usb1/1-2/1-2:1.0 &lt;span class="o"&gt;(&lt;/span&gt;usb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/pyudev"&gt;Pyudev&lt;/a&gt;, a third party package provides python bindings for udev. It can be installed with &lt;code&gt;pip install pyudev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With this we can create a simple monitor to detect USB events.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyudev&lt;/span&gt;

&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyudev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;monitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyudev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Monitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_netlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subsystem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'usb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'add'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{} connected'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Save this to a file say monitor.py and run it with &lt;code&gt;python monitor.py&lt;/code&gt; and connect a mobile or pendrive and it will show something like this.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Device&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/sys/devices/pci0000:00/0000:00:14.0/usb1/1-6/1-6:1.0'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; connected
Device&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/sys/devices/pci0000:00/0000:00:14.0/usb1/1-1/1-1:1.0'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; connected
&lt;/pre&gt;


&lt;p&gt;Here we are just detecting &lt;code&gt;add&lt;/code&gt; event. Similary we can detect other events like &lt;code&gt;delete&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is useful for automatically running shell scripts once the device gets plugged or unplugged.&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.avilpage.com/2016/09/detecting-device-events-in-ubuntu-with-python.html</guid><pubDate>Fri, 02 Sep 2016 13:24:38 GMT</pubDate></item><item><title>Migrate From Blogger To Static Site (Nikola)</title><link>http://www.avilpage.com/2016/08/migrate-from-blogger-to-static-site-nikola.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;Long back I have started this blog on &lt;a href="https://blogger.com"&gt;blogger&lt;/a&gt; platform. Now I choose to migrate to a static because of limitations of blogger.&lt;/p&gt;
&lt;p&gt;Blogger has a simple editor in browser to write posts in html. With static site, you can write post in your editor in markdown and keep them in version control system like git.&lt;/p&gt;
&lt;p&gt;Jekyll, Pelican, Lektor were my initial choices for static site generators. Unfortunately, they didn't had any useful plugins for smooth migration of data from blogger. Then I stumbled across &lt;a href="https://plugins.getnikola.com/#import_blogger"&gt;import_blogger&lt;/a&gt; plugin of &lt;a href="https://getnikola.com"&gt;Nikola&lt;/a&gt; and it is able to migrate text content, images without any issues. So, I decided to use Nikola.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://getnikola.com"&gt;Nikola&lt;/a&gt; has great documentation and setup was simpler. I used &lt;code&gt;import_blogger&lt;/code&gt; plugin and imported all the data. All the posts and pages were working well with exact same urls.&lt;/p&gt;
&lt;p&gt;Blogger tags all posts of particular label under &lt;code&gt;/search/label/foo&lt;/code&gt;. I have used these urls in some posts. Nikola shows posts under &lt;code&gt;/categories/foo.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is where nikola &lt;code&gt;REDIRECTIONS&lt;/code&gt; come in handy. Using this, a list of from &amp;amp; to urls can be mapped. I wrote a simple function for redirections and then enabled &lt;code&gt;STRIP_INDEXES&lt;/code&gt; which removes trailing &lt;code&gt;.html&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'emacs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'django'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'chrome'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;LABEL_REDIRECTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;LABEL_REDIRECTIONS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;
        &lt;span class="s1"&gt;'/search/label/{}/index.html'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;'/categories/{}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Since I stripped &lt;code&gt;.html&lt;/code&gt; from urls, old urls broke. So I generated a list of old urls and wrote another function to redirect them to new urls.&lt;/p&gt;
&lt;p&gt;Nikola has few builtin themes. I wanted something minimalistic and so I rolled out custom theme which you are seeing right now.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/punchagan"&gt;Puneeth Chaganti&lt;/a&gt;, &lt;a href="https://github.com/Kwpolska"&gt;Chris Warrick&lt;/a&gt;, &lt;a href="https://github.com/ralsina"&gt;Roberto Alsina&lt;/a&gt; for helping me with migration.&lt;/p&gt;&lt;/div&gt;</description><category>blogger</category><category>nikola</category><guid>http://www.avilpage.com/2016/08/migrate-from-blogger-to-static-site-nikola.html</guid><pubDate>Sun, 07 Aug 2016 11:32:15 GMT</pubDate></item><item><title>emblem-mode for Emacs!</title><link>http://www.avilpage.com/2016/07/emblem-mode-for-emacs.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div&gt;&lt;p&gt;Emblem.js is a ember friendly templating engine used as an alternative for handlebars.js.&lt;/p&gt;
&lt;p&gt;Emblem.js doesn't have any official plugins for emacs. However they recommend to use slim plugins as they are similar.&lt;/p&gt;
&lt;p&gt;You get slim-mode from melpa. Install with&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;M-x install-package slim-mode
&lt;/pre&gt;


&lt;p&gt;Now we have to activate slim-mode for emblem files which will be ending with &lt;code&gt;.em&lt;/code&gt; or &lt;code&gt;.emblem&lt;/code&gt;. We can use &lt;code&gt;auto-mode-alist&lt;/code&gt; to set major modes that needs to activated for files with specific extension.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'auto-mode-alist&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\.\\(em\\|emblem\\)\\'"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;slim-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We can add this to emacs configuration which automatically activates slim mode for emblem.js files.&lt;/p&gt;&lt;/div&gt;</description><category>emblem</category><category>slim-mode</category><guid>http://www.avilpage.com/2016/07/emblem-mode-for-emacs.html</guid><pubDate>Mon, 25 Jul 2016 17:32:35 GMT</pubDate></item><item><title>Auto Completion For Custom Search Engines In Chrome</title><link>http://www.avilpage.com/2016/06/auto-completion-for-custom-search.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;
    &lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;
      &lt;span style="font-size: 16px; font-weight: normal; line-height: 25.6px;"&gt;If we have to search for a video on YouTube or a product on Amazon, we will open
      up that site first and then we will search for it.&lt;/span&gt;
    &lt;/div&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    &lt;a href="https://cloud.githubusercontent.com/assets/4463796/15986478/89999bda-3026-11e6-9460-9b0c2d4db4d9.png" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;" target="_blank"&gt;&lt;img alt="Chrome-custom-search-autocompletion1" src="https://cloud.githubusercontent.com/assets/4463796/15986478/89999bda-3026-11e6-9460-9b0c2d4db4d9.png" style="border: 0px; box-sizing: border-box; max-width: 100%;"&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    To avoid this, Chrome allows us to search using custom search engines without visiting the site first. In chrome search settings, we can assign a single
    letter to a custom search engine.
    &lt;/div&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    &lt;a href="https://cloud.githubusercontent.com/assets/4463796/15986479/899a642a-3026-11e6-8084-beddf28bf8d6.png" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;" target="_blank"&gt;&lt;img alt="Chrome-custom-search-autocompletion1" src="https://cloud.githubusercontent.com/assets/4463796/15986479/899a642a-3026-11e6-8084-beddf28bf8d6.png" style="border: 0px; box-sizing: border-box; max-width: 100%;"&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    Now if we go to browser, typeÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;y&lt;/code&gt;Â and
    hitÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;Tab&lt;/code&gt;,
    it prompts for YouTube search instead of default search.
    &lt;/div&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    &lt;a href="https://cloud.githubusercontent.com/assets/4463796/15986476/89951240-3026-11e6-99ad-cc8cf9127605.png" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;" target="_blank"&gt;&lt;img alt="Chrome-custom-search-autocompletion1" src="https://cloud.githubusercontent.com/assets/4463796/15986476/89951240-3026-11e6-99ad-cc8cf9127605.png" style="border: 0px; box-sizing: border-box; max-width: 100%;"&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    This is handy. But the major problem with this approach is there won't be autocompletion in chrome address bar.
    &lt;/div&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    This is where vimium comes into picture. Vimium provides auto completion for custom search engines.
    &lt;/div&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    You can install itÂ &lt;a href="https://chrome.google.com/webstore/detail/dbepggeogbaibhgnhhndojpepiihcmeb" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;"&gt;from chrome webstore&lt;/a&gt;. Once it is installed, go to Vimium options and
    add youtube search to custom search engines.
    &lt;/div&gt;
    &lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;"&gt;

&lt;code style="background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; max-width: initial; overflow: initial; padding: 0px; word-break: normal; word-wrap: normal;"&gt;y: http://www.youtube.com/results?search_query=%s Youtube&lt;br&gt;&lt;/code&gt;
&lt;/pre&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    Also add a custom key map for this search.
    &lt;/div&gt;
    &lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;"&gt;

&lt;code style="background: transparent; border-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; line-height: inherit; margin: 0px; max-width: initial; overflow: initial; padding: 0px; word-break: normal; word-wrap: normal;"&gt;map y Vomnibar.activateInNewTab keyword=y&lt;br&gt;&lt;/code&gt;
&lt;/pre&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    If we just pressÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;y&lt;/code&gt;,
    it open youtube custom search with autocompletion.
    &lt;/div&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
    &lt;a href="https://cloud.githubusercontent.com/assets/4463796/15986477/8996f3e4-3026-11e6-8c83-8a74f0ab84fb.png" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;" target="_blank"&gt;&lt;img alt="Chrome-custom-search-autocompletion1" src="https://cloud.githubusercontent.com/assets/4463796/15986477/8996f3e4-3026-11e6-8c83-8a74f0ab84fb.png" style="border: 0px; box-sizing: border-box; max-width: 100%;"&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;
        Now in every page, we have autocompletion for custom search engines.&lt;br&gt;

      &lt;br&gt;
      More articles about &lt;a href="http://www.avilpage.com/search/label/chrome/"&gt;Chrome&lt;/a&gt;.

    &lt;/div&gt;
  &lt;/div&gt;
</description><category>chrome</category><category>tech</category><category>tnt</category><guid>http://www.avilpage.com/2016/06/auto-completion-for-custom-search.html</guid><pubDate>Sat, 11 Jun 2016 17:37:00 GMT</pubDate></item><item><title>Concurrent Downloads - Bash (xargs, parallel) Vs Python (ThreadPoolExecutor)</title><link>http://www.avilpage.com/2016/05/concurrent-downloads-bash-vs-python.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;I just found one more free telugu bookÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;Graded readings in modern literary Telugu&lt;/code&gt;Â by Golla Narayanaswami Reddy and Dan M Matson inÂ &lt;a href="http://dsal.uchicago.edu/digbooks/dig_toc.html?BOOKID=PL4775.R4_1967" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;"&gt;Digital South Asia Library&lt;/a&gt;.&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;Unfortunately they didn't provide it as an ebook but as a set of 221 tif images.&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;I wrote a simple for loop in shell which downloaded all images one by one usingÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;wget&lt;/code&gt;.&lt;/div&gt;&lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;$ base_url=&lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;http://dsal.uchicago.edu&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;br&gt;$ url=&lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;&lt;span class="pl-smi" style="box-sizing: border-box; color: #333333;"&gt;$base_url&lt;/span&gt;/digbooks/images/PL4775.R4_1967/PL4775.R4_1967_%03g.gif&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;br&gt;$ &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;time&lt;/span&gt; -p sh -c &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;for i in $(seq -f $url 1 221); do; wget $i; done;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;I took 375 seconds for that. This was too slow. So I tried to download them parallelly using xargs.&lt;/div&gt;&lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;$ &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;time&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;echo&lt;/span&gt; &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;$(&lt;/span&gt;seq -f &lt;span class="pl-smi" style="box-sizing: border-box; color: #333333;"&gt;$url&lt;/span&gt; 1 221&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;|&lt;/span&gt; xargs -n 1 -P 36 wget&lt;/pre&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;My laptop has a quad core processor. So I tried with 20, 24, 28, 32 process at a time.&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;WithÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;wget+xargs&lt;/code&gt;, the best timing is 13 seconds (CPU: 15%, Process: 28).&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;Again I tried downloading them parallelly but with GNU parallel.&lt;/div&gt;&lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;$ &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;time&lt;/span&gt; seq -f &lt;span class="pl-smi" style="box-sizing: border-box;"&gt;$url&lt;/span&gt; 1 221 &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;|&lt;/span&gt; parallel -j36 wget {}&lt;/pre&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;WithÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;wget+parallel&lt;/code&gt;, the best timing is 12 seconds (CPU: 48%, Process: 24).&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;Here is cpu consumption and time taken at each step.&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;a href="https://cloud.githubusercontent.com/assets/4463796/15634659/08965d50-25e7-11e6-9f3e-02fe008997a1.png" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;" target="_blank"&gt;&lt;img alt="paralle_python_bash2" src="https://cloud.githubusercontent.com/assets/4463796/15634659/08965d50-25e7-11e6-9f3e-02fe008997a1.png" style="border: 0px; box-sizing: border-box; max-width: 100%;"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;Once I have done with bash, I decided to try the same things with Python and see how it goes.&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;I wrote a simple script using requests to download images.&lt;/div&gt;&lt;div class="highlight highlight-source-python" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; shutil&lt;br&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; sys&lt;br&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;from&lt;/span&gt; concurrent &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; futures&lt;br&gt;&lt;br&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; requests&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;def&lt;/span&gt; &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;download_image&lt;/span&gt;(&lt;span class="pl-smi" style="box-sizing: border-box;"&gt;url&lt;/span&gt;):&lt;br&gt;    r &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; requests.get(url)&lt;br&gt;    file_name &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; url.split(&lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;/&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;)[&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;-&lt;/span&gt;&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;1&lt;/span&gt;]&lt;br&gt;    &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;with&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;open&lt;/span&gt;(file_name, &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;wb&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;as&lt;/span&gt; fh:&lt;br&gt;        fh.write(r.content)&lt;br&gt;&lt;br&gt;&lt;br&gt;base_url &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;http://dsal.uchicago.edu&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;book_url &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; base_url &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;+&lt;/span&gt; &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;/digbooks/images/PL4775.R4_1967/PL4775.R4_1967_&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;{}&lt;/span&gt;.gif&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;urls &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; [book_url.format(&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;str&lt;/span&gt;(i).zfill(&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;3&lt;/span&gt;)) &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;for&lt;/span&gt; i &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;in&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;range&lt;/span&gt;(&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;1&lt;/span&gt;, &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;221&lt;/span&gt;)]&lt;br&gt;&lt;br&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;def&lt;/span&gt; &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;download_serially&lt;/span&gt;():&lt;br&gt;    &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;for&lt;/span&gt; url &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;in&lt;/span&gt; urls:&lt;br&gt;        download_image(url)&lt;br&gt;&lt;br&gt;download_serially()&lt;/pre&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;This took 244 seconds.&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;To download images parallelly, I have usedÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;Threadpoolexecutor&lt;/code&gt;Â fromÂ &lt;a href="https://docs.python.org/3.5/library/concurrent.futures.html" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;"&gt;concurrent module&lt;/a&gt;.&lt;/div&gt;&lt;div class="highlight highlight-source-python" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;def&lt;/span&gt; &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;download_parallely&lt;/span&gt;():&lt;br&gt;    workers &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;int&lt;/span&gt;(sys.argv[&lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;1&lt;/span&gt;])&lt;br&gt;&lt;br&gt;    &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;with&lt;/span&gt; futures.ThreadPoolExecutor(&lt;span class="pl-v" style="box-sizing: border-box; color: #ed6a43;"&gt;max_workers&lt;/span&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt;workers) &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;as&lt;/span&gt; executor:&lt;br&gt;        result &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; executor.map(download_image, urls)&lt;br&gt;&lt;br&gt;download_parallely()&lt;/pre&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;I used previous script but just added one more function which queues tasks. Then I have executed the script with several options.&lt;/div&gt;&lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;$ &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;time&lt;/span&gt; python down.py 28&lt;/pre&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;Threadpoolexecutor documentation uses 5 times number of processors as max_workers by default. I tried same options which I have used for bash. Here is the overall comparision.&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;WithÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;requests+ThreadPoolExecutor&lt;/code&gt;, the best timing is 12 seconds (CPU: 36%, Process: 28).&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;Here is the overall comparision.&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;a href="https://cloud.githubusercontent.com/assets/4463796/15634653/edadbb50-25e6-11e6-8f59-c908ca7d65b2.png" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;" target="_blank"&gt;&lt;img alt="paralle_python_bash" src="https://cloud.githubusercontent.com/assets/4463796/15634653/edadbb50-25e6-11e6-8f59-c908ca7d65b2.png" style="border: 0px; box-sizing: border-box; max-width: 100%;"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;span style="line-height: 25.6px;"&gt;For a simple concurrent download, xargs+wget seems to be the best option.&lt;/span&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;span style="line-height: 25.6px;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;span style="background-color: white; line-height: 25.6px;"&gt;Read moreÂ &lt;/span&gt;&lt;a href="http://www.avilpage.com/search/label/python" style="background-color: white; color: #5421bb; cursor: pointer; line-height: 25.6px; text-decoration: none;"&gt;articles about Python&lt;/a&gt;&lt;span style="background-color: white; line-height: 25.6px;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description><category>python</category><category>tech</category><category>ubuntu</category><guid>http://www.avilpage.com/2016/05/concurrent-downloads-bash-vs-python.html</guid><pubDate>Sun, 29 May 2016 17:25:00 GMT</pubDate></item><item><title>Emacs - Browsing Projects With Etags</title><link>http://www.avilpage.com/2016/04/emacs-browsing-projects-with-etags.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;A tag is a reference to a sub unit in a program. A tag references syntactic elements like functions, classes e.t.c. A tags table consists of list of tag names and their positions in corresponding files.&lt;/div&gt;&lt;h4 style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.25em; line-height: 1.4; margin-bottom: 16px; margin-top: 1em; position: relative;"&gt;&lt;a aria-hidden="true" class="anchor" href="http://localhost:6419/#creating-tags-table" id="user-content-creating-tags-table" style="box-sizing: border-box; color: #4078c0; cursor: pointer; display: block; left: 0px; line-height: 1.2; margin-left: -30px; padding-left: 30px; padding-right: 6px; position: absolute; text-decoration: none; top: 0px;"&gt;&lt;/a&gt;Creating Tags Table&lt;/h4&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;A tags table can be generated byÂ &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Create-Tags-Table.html" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;"&gt;etags&lt;/a&gt;Â program. If you are using Ubuntu machine, you can install it with&lt;/div&gt;&lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;sudo apt-get install exuberant-ctags&lt;/pre&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;Now, you can generate tags for a file with&lt;/div&gt;&lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;etags input_file&lt;/pre&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;Depending on the project, we can also generate tags for a particular type. For example, we can generate tags for all python files using&lt;/div&gt;&lt;div class="highlight highlight-source-shell" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;find &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;.&lt;/span&gt; -name &lt;span class="pl-s" style="box-sizing: border-box; color: #183691;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;*.py&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt; -exec etags -a {} &lt;span class="pl-cce" style="box-sizing: border-box;"&gt;\;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.25em; line-height: 1.4; margin-bottom: 16px; margin-top: 1em; position: relative;"&gt;&lt;a aria-hidden="true" class="anchor" href="http://localhost:6419/#browsing-tags" id="user-content-browsing-tags" style="box-sizing: border-box; color: #4078c0; cursor: pointer; display: block; left: 0px; line-height: 1.2; margin-left: -30px; padding-left: 30px; padding-right: 6px; position: absolute; text-decoration: none; top: 0px;"&gt;&lt;/a&gt;Browsing Tags&lt;/h4&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;This tag tables enables you to jump to definition of any tag. You can place cursor on a tag and press&lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;M-.&lt;/code&gt;(find-tag) which takes you to definition of that tag. If you want to go back to previous location, you can useÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;M-*&lt;/code&gt;(pop-tag -mark). There areÂ &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Tag.html#Find-Tag" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;"&gt;several functions&lt;/a&gt;Â which help to navigate tags.&lt;/div&gt;&lt;h4 style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.25em; line-height: 1.4; margin-bottom: 16px; margin-top: 1em; position: relative;"&gt;&lt;a aria-hidden="true" class="anchor" href="http://localhost:6419/#tips" id="user-content-tips" style="box-sizing: border-box; color: #4078c0; cursor: pointer; display: block; left: 0px; line-height: 1.2; margin-left: -30px; padding-left: 30px; padding-right: 6px; position: absolute; text-decoration: none; top: 0px;"&gt;&lt;/a&gt;Tips&lt;/h4&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;&lt;a href="https://github.com/jixiuf/helm-etags-plus" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;"&gt;ctags-update&lt;/a&gt;Â is a third party package which automatically updates TAGS file when new files are created.&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;In addition to them, helm provides a function calledÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;helm-semantic&lt;/code&gt;Â which shows all available tags in the current file. This works without TAGS file. Helm also hasÂ &lt;code style="background-color: rgba(0, 0, 0, 0.0392157); border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; margin: 0px; padding: 0.2em 0px;"&gt;helm-etags-select&lt;/code&gt;Â which provides helm interface to select tags.&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;"&gt;If you are working with a python projects, you can useÂ &lt;a href="https://github.com/jorgenschaefer/elpy" style="box-sizing: border-box; color: #4078c0; cursor: pointer; text-decoration: none;"&gt;elpy&lt;/a&gt;Â which navigates tags (using Jedi in the backend) without any TAGS file.&lt;/div&gt;&lt;h1 style="border-bottom-color: rgb(238, 238, 238); border-bottom-style: solid; border-bottom-width: 1px; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 2.25em; line-height: 1.2; margin: 1em 0px 16px; padding-bottom: 0.3em; position: relative;"&gt;&lt;a aria-hidden="true" class="anchor" href="http://localhost:6419/#adding-attributes-to-django-forms" id="user-content-adding-attributes-to-django-forms" style="box-sizing: border-box; color: #4078c0; cursor: pointer; display: block; left: 0px; line-height: 1; margin-left: -30px; padding-left: 30px; padding-right: 6px; position: absolute; text-decoration: none; top: 0px;"&gt;&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;</description><category>emacs</category><category>python</category><category>tech</category><guid>http://www.avilpage.com/2016/04/emacs-browsing-projects-with-etags.html</guid><pubDate>Sun, 17 Apr 2016 16:11:00 GMT</pubDate></item></channel></rss>