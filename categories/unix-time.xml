<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avil Page (unix time)</title><link>http://www.avilpage.com</link><description></description><atom:link type="application/rss+xml" href="http://www.avilpage.com/categories/unix-time.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 23 Oct 2016 03:40:14 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Unix Timestamp, UTC And Their Conversions In Python!</title><link>http://www.avilpage.com/2014/11/python-unix-timestamp-utc-and-their/</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;Recently I started messing with Nidaba. Nidaba is a data analytics project devoted to analysing and making use of the freely available information on Stack Overflow, in particular when relating to the Python programming language. SO gives all time objects in  Unix time format. For analysis, it is required to convert it into human readable format to figure out the day it corresponds to. Let us take a look at UTC &amp;amp; Unix timestamps.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Coordinated Universal Time(UTC):&lt;/h3&gt;&lt;div style="text-align: left;"&gt;It is the primary time standard by which the world regulates clocks and time.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;To get current UTC time in Python, You can use datetime module.&lt;/div&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;In [5]: import datetime&lt;br&gt;&lt;br&gt;In [6]: datetime.datetime.now(datetime.timezone.utc)&lt;br&gt;Out[6]: datetime.datetime(2014, 11, 22, 14, 42, 21, 34435, tzinfo=datetime.timezone.utc)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;h3 style="text-align: left;"&gt;Unix time / POSIX time / Epoch time: &lt;/h3&gt;&lt;div&gt;It is a system for describing instants in time, defined as the number of seconds that have elapsed since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970, not counting leap seconds.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;To get Unix timestamp, you can use time module.&lt;/div&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;In [8]: import time&lt;br&gt;&lt;br&gt;In [9]: time.time()&lt;br&gt;Out[9]: 1416667432.5664258&lt;br&gt;&lt;br&gt;In [10]: int(time.time())&lt;br&gt;Out[10]: 1416667766&lt;/pre&gt;&lt;/div&gt;If You are using Pyhon 3.4, you can use &lt;i&gt;timestamp &lt;/i&gt;function to convert it &lt;br&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;In [13]: datetime.datetime.utcnow().timestamp()&lt;br&gt;Out[13]: 1416649608.58369&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Conversions:&lt;/h3&gt;&lt;div&gt;To convert Unix timestamp to UTC You can use &lt;i&gt;utcfromtimestamp&lt;/i&gt; function.&lt;/div&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;In [21]: datetime.datetime.utcfromtimestamp(1416668401)&lt;br&gt;Out[21]: datetime.datetime(2014, 11, 22, 15, 0, 1)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;To convert UTC time object to Unix time, you can use strftime function. &lt;br&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;In [38]: dt = datetime.datetime.now()&lt;br&gt;&lt;br&gt;In [39]: dt.strftime("%s")&lt;br&gt;Out[39]: '1416668938'&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;Alternatively You can use &lt;i&gt;calendar.timegen &lt;/i&gt;function also.&lt;br&gt;&lt;div style="background-color: #eeffcc;"&gt;&lt;pre style="border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(170, 204, 153); font-family: monospace, sans-serif; font-size: 15px; line-height: 18.5279998779297px; overflow-x: auto; overflow-y: hidden; padding: 5px;"&gt;In [46]: import calendar&lt;br&gt;&lt;br&gt;In [47]: dt = datetime.datetime.utcnow()&lt;br&gt;&lt;br&gt;In [48]: calendar.timegm(dt.utctimetuple())&lt;br&gt;Out[48]: 1416669150&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>conversion</category><category>python</category><category>tech</category><category>unix time</category><category>utc</category><guid>http://www.avilpage.com/2014/11/python-unix-timestamp-utc-and-their/</guid><pubDate>Sat, 22 Nov 2014 18:26:00 GMT</pubDate></item></channel></rss>