<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Avil Page (type conversion)</title><link>http://www.avilpage.com</link><description></description><atom:link rel="self" href="http://www.avilpage.com/categories/type-conversion.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 25 Dec 2016 18:36:32 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>[Python] Converting String Type Objects To Correct Types!</title><link>http://www.avilpage.com/2014/11/python-converting-string-type-objects.html</link><dc:creator>Chillar Anand</dc:creator><description>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;I was writing custom template tags for one of my Django package. I came across a situation where I had lists in string format. I need to convert them into lists.&lt;br&gt;&lt;pre style="background-color: #eeffcc; border-bottom-color: rgb(170, 204, 153); border-bottom-width: 1px; border-style: solid none; border-top-color: rgb(170, 204, 153); border-top-width: 1px; line-height: 30px; overflow-x: auto; overflow-y: hidden; padding: 2px;"&gt;temp_str = '[345, 3, 456, 45]'&lt;br&gt;required_obj = [345, 3, 456, 45]&lt;/pre&gt;There are two methods to get this job done.&lt;br&gt;&lt;br&gt;&lt;h3 style="text-align: left;"&gt;1. ast.literal_eval:&lt;/h3&gt;&lt;div&gt;This can be used to evaluate  strings containing Python values from untrusted sources without parsing values.&lt;/div&gt;&lt;div&gt;&lt;pre style="background-color: #eeffcc; border-bottom-color: rgb(170, 204, 153); border-bottom-width: 1px; border-style: solid none; border-top-color: rgb(170, 204, 153); border-top-width: 1px; line-height: 30px; overflow-x: auto; overflow-y: hidden; padding: 2px;"&gt;import ast&lt;br&gt;ast.literal_eval(temp_str)&lt;br&gt;&lt;/pre&gt;&lt;h3 style="text-align: left;"&gt;2. json.loads:&lt;/h3&gt;&lt;div&gt;This is used to deserialize a string to python object using a &lt;a href="https://docs.python.org/2/library/json.html#json-to-py-table" target="_blank"&gt;conversion table&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;pre style="background-color: #eeffcc; border-bottom-color: rgb(170, 204, 153); border-bottom-width: 1px; border-style: solid none; border-top-color: rgb(170, 204, 153); border-top-width: 1px; line-height: 30px; overflow-x: auto; overflow-y: hidden; padding: 2px;"&gt;import json&lt;br&gt;json.loads(temp_str)&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;These two functions come in handy whenever you want to convert a list of python objects to their correct types. For example, if you have list of python objects like this &lt;br&gt;&lt;pre style="background-color: #eeffcc; border-bottom-color: rgb(170, 204, 153); border-bottom-width: 1px; border-style: solid none; border-top-color: rgb(170, 204, 153); border-top-width: 1px; line-height: 26px; overflow-x: auto; overflow-y: hidden; padding: 2px;"&gt;obj_list =  ['hello', '3', '3.64', '-1']&lt;br&gt;&lt;/pre&gt;You can convert them to their corresponding types using these functions. &lt;br&gt;&lt;pre style="background-color: #eeffcc; border-bottom-color: rgb(170, 204, 153); border-bottom-width: 1px; border-style: solid none; border-top-color: rgb(170, 204, 153); border-top-width: 1px; line-height: 26px; overflow-x: auto; overflow-y: hidden; padding: 2px;"&gt;def converter(l):&lt;br&gt;    for i in l:&lt;br&gt;        try:&lt;br&gt;            yield json.loads(i)&lt;br&gt;        except ValueError:&lt;br&gt;            yield i&lt;br&gt;&lt;/pre&gt;&lt;pre style="background-color: #eeffcc; border-bottom-color: rgb(170, 204, 153); border-bottom-width: 1px; border-style: solid none; border-top-color: rgb(170, 204, 153); border-top-width: 1px; line-height: 26px; overflow-x: auto; overflow-y: hidden; padding: 2px;"&gt;def converter(l):&lt;br&gt;    for i in l:&lt;br&gt;        try:&lt;br&gt;            yield ast.literal_eval(i)&lt;br&gt;        except ValueError:&lt;br&gt;            yield i&lt;br&gt;&lt;/pre&gt;They yield a objects of corresponding types &lt;br&gt;&lt;pre style="background-color: #eeffcc; border-bottom-color: rgb(170, 204, 153); border-bottom-width: 1px; border-style: solid none; border-top-color: rgb(170, 204, 153); border-top-width: 1px; line-height: 26px; overflow-x: auto; overflow-y: hidden; padding: 2px;"&gt;new_obj_list = ['hello', 3, 3.64, -1]&lt;br&gt;&lt;/pre&gt;References: &lt;a href="http://docs.celeryproject.org/en/latest/index.html" target="_blank"&gt;Python Docs&lt;/a&gt;, &lt;a href="http://stackoverflow.com/a/26979669/2698552" target="_blank"&gt;Stackoverflow&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>objects</category><category>python</category><category>tech</category><category>type conversion</category><guid>http://www.avilpage.com/2014/11/python-converting-string-type-objects.html</guid><pubDate>Mon, 17 Nov 2014 19:40:00 GMT</pubDate></item></channel></rss>